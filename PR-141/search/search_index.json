{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.\\_]+"},"docs":[{"location":"","text":"EthSigner transaction signer \u00b6 What is EthSigner? \u00b6 EthSigner is an open-source, client-agnostic, Ethereum transaction signer developed under the Apache 2.0 license and written in Java. EthSigner separates private key management from transaction validation by signing transactions using a private key that can be secured in a variety of cloud providers, or encrypted on a local disk. Is EthSigner part of ConsenSys Quorum? \u00b6 Yes. ConsenSys Quorum is the complete open source blockchain layer with enterprise support available from ConsenSys . New to ConsenSys Quorum? \u00b6 Get started with the Quorum Developer Quickstart . Use the quickstart to rapidly generate local Quorum blockchain networks.","title":"EthSigner transaction signer"},{"location":"#ethsigner-transaction-signer","text":"","title":"EthSigner transaction signer"},{"location":"#what-is-ethsigner","text":"EthSigner is an open-source, client-agnostic, Ethereum transaction signer developed under the Apache 2.0 license and written in Java. EthSigner separates private key management from transaction validation by signing transactions using a private key that can be secured in a variety of cloud providers, or encrypted on a local disk.","title":"What is EthSigner?"},{"location":"#is-ethsigner-part-of-consensys-quorum","text":"Yes. ConsenSys Quorum is the complete open source blockchain layer with enterprise support available from ConsenSys .","title":"Is EthSigner part of ConsenSys Quorum?"},{"location":"#new-to-consensys-quorum","text":"Get started with the Quorum Developer Quickstart . Use the quickstart to rapidly generate local Quorum blockchain networks.","title":"New to ConsenSys Quorum?"},{"location":"support/","text":"EthSigner support \u00b6 Need help on using EthSigner? Ask our community or request paid support. Professional support (paid) \u00b6 ask our ConsenSys Quorum support team for a professional subscription. Professional support detail Paid subscription (yearly or monthly) SLAs Support level choice (Gold, Bronze, Silver) Business hours worldwide coverage Community support (free) \u00b6 Discord read more on ConsenSys Quorum site create an issue on the repository . Community support detail Free, no subscription Community led 24/7 worldwide coverage","title":"Support"},{"location":"support/#ethsigner-support","text":"Need help on using EthSigner? Ask our community or request paid support.","title":"EthSigner support"},{"location":"support/#professional-support-paid","text":"ask our ConsenSys Quorum support team for a professional subscription. Professional support detail Paid subscription (yearly or monthly) SLAs Support level choice (Gold, Bronze, Silver) Business hours worldwide coverage","title":"Professional support (paid)"},{"location":"support/#community-support-free","text":"Discord read more on ConsenSys Quorum site create an issue on the repository . Community support detail Free, no subscription Community led 24/7 worldwide coverage","title":"Community support (free)"},{"location":"Concepts/Overview/","text":"Overview \u00b6 EthSigner acts as a proxy service by forwarding requests to the Ethereum client. When EthSigner receives a transaction it generates a signature using the stored private key, and forwards the signed transaction to the Ethereum client. EthSigner can sign transactions with keys stored in: A V3 keystore file stored on a file system accessible by the host. HashiCorp Vault . Azure Key Vault . Note The file-based-signer , hashicorp-signer , and azure-signer command line options are used for a single key only . The multikey-signer command line option is used for one or more keys . The transaction process when using EthSigner is:","title":"Overview"},{"location":"Concepts/Overview/#overview","text":"EthSigner acts as a proxy service by forwarding requests to the Ethereum client. When EthSigner receives a transaction it generates a signature using the stored private key, and forwards the signed transaction to the Ethereum client. EthSigner can sign transactions with keys stored in: A V3 keystore file stored on a file system accessible by the host. HashiCorp Vault . Azure Key Vault . Note The file-based-signer , hashicorp-signer , and azure-signer command line options are used for a single key only . The multikey-signer command line option is used for one or more keys . The transaction process when using EthSigner is:","title":"Overview"},{"location":"Concepts/TLS/","text":"TLS communication \u00b6 EthSigner supports TLS to secure inbound and outbound HTTP JSON-RPC requests, and communication with HashiCorp Vault. Private keys and certificates for client and server TLS connections must be stored in password-protected PKCS #12 keystores. The server (in this example, Hyperledger Besu) must be configured to accept TLS connections. Use the command line options to configure TLS on HTTP JSON-RPC requests and HashiCorp Vault .","title":"TLS communication"},{"location":"Concepts/TLS/#tls-communication","text":"EthSigner supports TLS to secure inbound and outbound HTTP JSON-RPC requests, and communication with HashiCorp Vault. Private keys and certificates for client and server TLS connections must be stored in password-protected PKCS #12 keystores. The server (in this example, Hyperledger Besu) must be configured to accept TLS connections. Use the command line options to configure TLS on HTTP JSON-RPC requests and HashiCorp Vault .","title":"TLS communication"},{"location":"HowTo/Configure-TLS/","text":"Configure TLS \u00b6 Configure TLS communication from the command line. Clients and servers communicate using HTTP JSON-RPCs. EthSigner prerequisites : EthSigner\u2019s password-protected PKCS #12 keystore. File containing the keystore password. Client TLS connection \u00b6 Allow clients (for example a dApp, or curl) to send and receive secure HTTP JSON-RPCs. Client prerequisites : The client must be configured for TLS. Client\u2019s PKCS #12 keystore information. Create the known clients file \u00b6 Create a file (in this example, knownClients ) that lists one or more clients that are trusted to connect to EthSigner. The file contents use the format <common_name> <hex-string> where: <common_name> is the Common Name used for the client\u2019s keystore <hex-string> is the SHA-256 fingerprint of the client\u2019s keystore. Example curl_client DF:65:B8:02:08:5E:91:82:0F:91:F5:1C:96:56:92:C4:1A:F6:C6:27:FD:6C:FC:31:F2:BB:90:17:22:59:5B:50 You can use OpenSSL or keytool to display the fingerprint. For example: Example keytool -list -v -keystore <keystore> -storetype PKCS12 -storepass <password> Start EthSigner \u00b6 ethsigner --tls-keystore-file = /Users/me/my_node/keystore.pfx --tls-keystore-password-file = /Users/me/my_node/keystorePassword --tls-known-clients-file = /Users/me/my_node/knownClients --tls-allow-ca-clients The command line: Specifies the EthSigner keystore using the --tls-keystore-file option. Specifies the file that contains the password to decrypt the keystore using the --tls-keystore-password-file option. Specifies the clients that are trusted to connect to EthSigner using the tls-known-clients-file option. Allow access to clients with trusted CA certificates using the --tls-allow-ca-clients option. Note Use the --tls-allow-any-client option to allow access to any client. --tls-allow-any-client cannot be used with tls-known-clients-file or --tls-allow-ca-clients . Server TLS connection \u00b6 Allow EthSigner to send and receive secure HTTP JSON-RPCs from the server (for example Besu). Server prerequisites : The server must be configured to allow TLS communication . Server\u2019s password-protected PKCS #12 keystore information. Create the known servers file \u00b6 Create a file (in this example, knownServers ) that lists one or more trusted servers. The file contents use the format <hostame>:<port> <hex-string> where: <hostname> is the server hostname <port> is the port used for communication <hex-string> is the SHA-256 fingerprint of the server\u2019s certificate. Example localhost:8590 6C:B2:3E:F9:88:43:5E:62:69:9F:A9:9D:41:14:03:BA:83:24:AC:04:CE:BD:92:49:1B:8D:B2:A4:86:39:4C:BB 127.0.0.1:8590 6C:B2:3E:F9:88:43:5E:62:69:9F:A9:9D:41:14:03:BA:83:24:AC:04:CE:BD:92:49:1B:8D:B2:A4:86:39:4C:BB Note Specify both hostname and IP address in the file if unsure which is used in requests. Start EthSigner \u00b6 ethsigner --downstream-http-tls-enabled --downstream-http-tls-keystore-file = /Users/me/my_node/keystore.pfx --downstream-http-tls-keystore-password-file = /Users/me/my_node/keyPassword --downstream-http-tls-known-servers-file = /Users/me/my_node/knownServers The command line: Enables TLS using the --downstream-http-tls-enabled option. Specifies the keystore to present during authentication using the --downstream-http-tls-keystore-file option. Specifies the file that contains the password to decrypt the keystore using the --downstream-http-tls-keystore-password-file option. Specifies the servers to connect to using the --downstream-http-tls-known-servers-file option. Note The --downstream-http-tls-ca-auth-enabled option is true by default and allows connections to servers with trusted root CAs.","title":"Configure TLS"},{"location":"HowTo/Configure-TLS/#configure-tls","text":"Configure TLS communication from the command line. Clients and servers communicate using HTTP JSON-RPCs. EthSigner prerequisites : EthSigner\u2019s password-protected PKCS #12 keystore. File containing the keystore password.","title":"Configure TLS"},{"location":"HowTo/Configure-TLS/#client-tls-connection","text":"Allow clients (for example a dApp, or curl) to send and receive secure HTTP JSON-RPCs. Client prerequisites : The client must be configured for TLS. Client\u2019s PKCS #12 keystore information.","title":"Client TLS connection"},{"location":"HowTo/Configure-TLS/#create-the-known-clients-file","text":"Create a file (in this example, knownClients ) that lists one or more clients that are trusted to connect to EthSigner. The file contents use the format <common_name> <hex-string> where: <common_name> is the Common Name used for the client\u2019s keystore <hex-string> is the SHA-256 fingerprint of the client\u2019s keystore. Example curl_client DF:65:B8:02:08:5E:91:82:0F:91:F5:1C:96:56:92:C4:1A:F6:C6:27:FD:6C:FC:31:F2:BB:90:17:22:59:5B:50 You can use OpenSSL or keytool to display the fingerprint. For example: Example keytool -list -v -keystore <keystore> -storetype PKCS12 -storepass <password>","title":"Create the known clients file"},{"location":"HowTo/Configure-TLS/#start-ethsigner","text":"ethsigner --tls-keystore-file = /Users/me/my_node/keystore.pfx --tls-keystore-password-file = /Users/me/my_node/keystorePassword --tls-known-clients-file = /Users/me/my_node/knownClients --tls-allow-ca-clients The command line: Specifies the EthSigner keystore using the --tls-keystore-file option. Specifies the file that contains the password to decrypt the keystore using the --tls-keystore-password-file option. Specifies the clients that are trusted to connect to EthSigner using the tls-known-clients-file option. Allow access to clients with trusted CA certificates using the --tls-allow-ca-clients option. Note Use the --tls-allow-any-client option to allow access to any client. --tls-allow-any-client cannot be used with tls-known-clients-file or --tls-allow-ca-clients .","title":"Start EthSigner"},{"location":"HowTo/Configure-TLS/#server-tls-connection","text":"Allow EthSigner to send and receive secure HTTP JSON-RPCs from the server (for example Besu). Server prerequisites : The server must be configured to allow TLS communication . Server\u2019s password-protected PKCS #12 keystore information.","title":"Server TLS connection"},{"location":"HowTo/Configure-TLS/#create-the-known-servers-file","text":"Create a file (in this example, knownServers ) that lists one or more trusted servers. The file contents use the format <hostame>:<port> <hex-string> where: <hostname> is the server hostname <port> is the port used for communication <hex-string> is the SHA-256 fingerprint of the server\u2019s certificate. Example localhost:8590 6C:B2:3E:F9:88:43:5E:62:69:9F:A9:9D:41:14:03:BA:83:24:AC:04:CE:BD:92:49:1B:8D:B2:A4:86:39:4C:BB 127.0.0.1:8590 6C:B2:3E:F9:88:43:5E:62:69:9F:A9:9D:41:14:03:BA:83:24:AC:04:CE:BD:92:49:1B:8D:B2:A4:86:39:4C:BB Note Specify both hostname and IP address in the file if unsure which is used in requests.","title":"Create the known servers file"},{"location":"HowTo/Configure-TLS/#start-ethsigner_1","text":"ethsigner --downstream-http-tls-enabled --downstream-http-tls-keystore-file = /Users/me/my_node/keystore.pfx --downstream-http-tls-keystore-password-file = /Users/me/my_node/keyPassword --downstream-http-tls-known-servers-file = /Users/me/my_node/knownServers The command line: Enables TLS using the --downstream-http-tls-enabled option. Specifies the keystore to present during authentication using the --downstream-http-tls-keystore-file option. Specifies the file that contains the password to decrypt the keystore using the --downstream-http-tls-keystore-password-file option. Specifies the servers to connect to using the --downstream-http-tls-known-servers-file option. Note The --downstream-http-tls-ca-auth-enabled option is true by default and allows connections to servers with trusted root CAs.","title":"Start EthSigner"},{"location":"HowTo/Use-Configuration-File/","text":"Using the EthSigner configuration file \u00b6 To specify command line options in a file, use a TOML configuration file. Save the configuration file and reuse it across node startups. To specify the configuration file, use the --config-file option. To override an option specified in the configuration file, either specify the same option on the command line or as an environment variable . For options specified in more than one place, the order of precedence is command line, environment variable, configuration file. TOML specification \u00b6 The configuration file must be a valid TOML file composed of key/value pairs. Each key is the same as the corresponding command line option name without the leading dashes ( -- ). For subcommands , prefix the key with the name of the subcommand. For example, multikey-signer.directory=<DIR> Note Subcommands cannot be specified in the configuration file, you can only specify a subcommand\u2019s associated options. The signing key subcommand must be specified on the command line. Values must conform to TOML specifications for string, numbers, arrays, and booleans. Specific differences between the command line and the TOML file format are: Comma-separated lists on the command line are string arrays in the TOML file. Enclose file paths, hexadecimal numbers, URLs, and <host:port> values in quotes. Tip The command line reference includes configuration file examples for each option. Sample TOML configuration file # Chain chain-id = 2017 # Path data-path = \"~/ethsignerdata\" # Path # Ethereum client (Besu) downstream-http-host = \"localhost\" downstream-http-port = 8545 # Signing options # file-based file-based-signer . key-file = \"/Users/me/my_node/transactionKey\" file-based-signer . password-file = \"/Users/me/my_node/password.txt\" # multi-key multikey-signer . directory = \"/Users/me/keys\" The sample TOML file specifies options for the file-based-signer and multikey-signer subcommands. However, you can only start EthSigner using one signing subcommand. Starting EthSigner with a configuration file ethsigner --config-file = /home/me/me_node/config.toml multikey-signer","title":"Use a configuration file"},{"location":"HowTo/Use-Configuration-File/#using-the-ethsigner-configuration-file","text":"To specify command line options in a file, use a TOML configuration file. Save the configuration file and reuse it across node startups. To specify the configuration file, use the --config-file option. To override an option specified in the configuration file, either specify the same option on the command line or as an environment variable . For options specified in more than one place, the order of precedence is command line, environment variable, configuration file.","title":"Using the EthSigner configuration file"},{"location":"HowTo/Use-Configuration-File/#toml-specification","text":"The configuration file must be a valid TOML file composed of key/value pairs. Each key is the same as the corresponding command line option name without the leading dashes ( -- ). For subcommands , prefix the key with the name of the subcommand. For example, multikey-signer.directory=<DIR> Note Subcommands cannot be specified in the configuration file, you can only specify a subcommand\u2019s associated options. The signing key subcommand must be specified on the command line. Values must conform to TOML specifications for string, numbers, arrays, and booleans. Specific differences between the command line and the TOML file format are: Comma-separated lists on the command line are string arrays in the TOML file. Enclose file paths, hexadecimal numbers, URLs, and <host:port> values in quotes. Tip The command line reference includes configuration file examples for each option. Sample TOML configuration file # Chain chain-id = 2017 # Path data-path = \"~/ethsignerdata\" # Path # Ethereum client (Besu) downstream-http-host = \"localhost\" downstream-http-port = 8545 # Signing options # file-based file-based-signer . key-file = \"/Users/me/my_node/transactionKey\" file-based-signer . password-file = \"/Users/me/my_node/password.txt\" # multi-key multikey-signer . directory = \"/Users/me/keys\" The sample TOML file specifies options for the file-based-signer and multikey-signer subcommands. However, you can only start EthSigner using one signing subcommand. Starting EthSigner with a configuration file ethsigner --config-file = /home/me/me_node/config.toml multikey-signer","title":"TOML specification"},{"location":"HowTo/Use-Multiple-Signers/","text":"Use multiple signing keys \u00b6 EthSigner supports transaction signing using multiple stored keys . Any account submitting transactions to EthSigner can use the stored keys. The keys can be stored in: A V3 keystore file stored on a file system accessible by the host. A HashiCorp Vault . An Azure Key Vault . Caution The ability to use mulitiple signing keys should be limited to the accounts with access to the stored keys. Each key requires a separate TOML file that defines the parameters to access the key. The TOML files must be placed in a single directory specified using the multikey-signer --directory subcommand. Tip Files can be added or removed from the directory without needing to restart EthSigner. The TOML file name must use the format [<prefix>]<accountAddress>.toml . The account address must be in lowercase. The prefix can be anything you want. No two TOML files can have the same key address in the file name, even if the prefix differs. Remove the 0x portion of the account address. For example, 78e6e236592597c09d5c137c2af40aecd42d12a2.toml . Tip Use the export-address Hyperledger Besu subcommand to obtain the account address of the node.","title":"Use multiple signing keys"},{"location":"HowTo/Use-Multiple-Signers/#use-multiple-signing-keys","text":"EthSigner supports transaction signing using multiple stored keys . Any account submitting transactions to EthSigner can use the stored keys. The keys can be stored in: A V3 keystore file stored on a file system accessible by the host. A HashiCorp Vault . An Azure Key Vault . Caution The ability to use mulitiple signing keys should be limited to the accounts with access to the stored keys. Each key requires a separate TOML file that defines the parameters to access the key. The TOML files must be placed in a single directory specified using the multikey-signer --directory subcommand. Tip Files can be added or removed from the directory without needing to restart EthSigner. The TOML file name must use the format [<prefix>]<accountAddress>.toml . The account address must be in lowercase. The prefix can be anything you want. No two TOML files can have the same key address in the file name, even if the prefix differs. Remove the 0x portion of the account address. For example, 78e6e236592597c09d5c137c2af40aecd42d12a2.toml . Tip Use the export-address Hyperledger Besu subcommand to obtain the account address of the node.","title":"Use multiple signing keys"},{"location":"HowTo/Use-Single-Signer/","text":"Use a single signing key \u00b6 The key used to sign transactions can be stored externally using HashiCorp Vault or Azure Key Vault , or in a V3 keystore file . To start EthSigner with a single signing key , use the subcommands: file-based-signer hashicorp-signer azure-signer","title":"Use a single signing key"},{"location":"HowTo/Use-Single-Signer/#use-a-single-signing-key","text":"The key used to sign transactions can be stored externally using HashiCorp Vault or Azure Key Vault , or in a V3 keystore file . To start EthSigner with a single signing key , use the subcommands: file-based-signer hashicorp-signer azure-signer","title":"Use a single signing key"},{"location":"HowTo/Extending-EthSigner/Add-Signer/","text":"Creating an external signer for EthSigner \u00b6 EthSigner supports the addition of more external signers in same way as HashiCorp Vault. To create an external signer: Clone the EthSigner repository . Create a Gradle module for the new signer in the ethsigner/signer directory. To ensure the module for the new signer is built, add the module to the settings.gradle file. In the new module, create a concrete child class of SignerSubCommand . The new SignerSubCommand must include the parameters (tagged with PicoCLI annotations) to initialize your signer. Update the createSigner() function to be the entry point to create and return your signer. Your signer is exposed only as a TransactionSigner . Note The new signing class is responsible for fulfilling the TransactionSigner interface. To fulfill the TransactionSigner interface, the class must be able to create a signature for a block of bytes and provide the address associated with the key pair in the signer. In EthSignerApp.java , register the new SignerSubCommand with the cmdLineParser as for existing signers. Update the EthSigner::app module dependency list to include the module created in step 2.","title":"Create external signers"},{"location":"HowTo/Extending-EthSigner/Add-Signer/#creating-an-external-signer-for-ethsigner","text":"EthSigner supports the addition of more external signers in same way as HashiCorp Vault. To create an external signer: Clone the EthSigner repository . Create a Gradle module for the new signer in the ethsigner/signer directory. To ensure the module for the new signer is built, add the module to the settings.gradle file. In the new module, create a concrete child class of SignerSubCommand . The new SignerSubCommand must include the parameters (tagged with PicoCLI annotations) to initialize your signer. Update the createSigner() function to be the entry point to create and return your signer. Your signer is exposed only as a TransactionSigner . Note The new signing class is responsible for fulfilling the TransactionSigner interface. To fulfill the TransactionSigner interface, the class must be able to create a signature for a block of bytes and provide the address associated with the key pair in the signer. In EthSignerApp.java , register the new SignerSubCommand with the cmdLineParser as for existing signers. Update the EthSigner::app module dependency list to include the module created in step 2.","title":"Creating an external signer for EthSigner"},{"location":"HowTo/Get-Started/Build-From-Source/","text":"Build from source \u00b6 Prerequisites \u00b6 Java JDK Important EthSigner requires Java 11 or later releases. Git or GitHub Desktop Installation on Linux / Unix / macOS \u00b6 Clone the EthSigner repository \u00b6 Clone the ConsenSys/ethsigner repository: git clone https://github.com/ConsenSys/ethsigner.git Build EthSigner \u00b6 After cloning, go to the ethsigner directory. Build EthSigner with the Gradle wrapper gradlew : ./gradlew build Go to the distribution directory: cd build/distributions/ Expand the distribution archive: tar -xzf ethsigner-<version>.tar.gz Move to the expanded folder and display the EthSigner help to confirm installation. cd ethsigner-<version>/ bin/ethsigner --help Installation on Windows \u00b6 Install EthSigner \u00b6 Clone the ConsenSys/ethsigner repository: git clone https://github.com/ConsenSys/ethsigner.git Build EthSigner \u00b6 Go to the ethsigner directory: cd ethsigner Build EthSigner with the Gradle wrapper gradlew : .\\gradlew build Note To run gradlew , you must have the JAVA_HOME system variable set to the Java installation directory. For example: JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_181 . Go to the distribution directory: cd build\\distributions Expand the distribution archive: tar -xzf ethsigner- < version > .tar.gz Go to the expanded folder and display the EthSigner help to confirm installation. cd ethsigner- < version> bin\\ethsigner --help","title":"Build from source"},{"location":"HowTo/Get-Started/Build-From-Source/#build-from-source","text":"","title":"Build from source"},{"location":"HowTo/Get-Started/Build-From-Source/#prerequisites","text":"Java JDK Important EthSigner requires Java 11 or later releases. Git or GitHub Desktop","title":"Prerequisites"},{"location":"HowTo/Get-Started/Build-From-Source/#installation-on-linux-unix-macos","text":"","title":"Installation on Linux / Unix / macOS"},{"location":"HowTo/Get-Started/Build-From-Source/#clone-the-ethsigner-repository","text":"Clone the ConsenSys/ethsigner repository: git clone https://github.com/ConsenSys/ethsigner.git","title":"Clone the EthSigner repository"},{"location":"HowTo/Get-Started/Build-From-Source/#build-ethsigner","text":"After cloning, go to the ethsigner directory. Build EthSigner with the Gradle wrapper gradlew : ./gradlew build Go to the distribution directory: cd build/distributions/ Expand the distribution archive: tar -xzf ethsigner-<version>.tar.gz Move to the expanded folder and display the EthSigner help to confirm installation. cd ethsigner-<version>/ bin/ethsigner --help","title":"Build EthSigner"},{"location":"HowTo/Get-Started/Build-From-Source/#installation-on-windows","text":"","title":"Installation on Windows"},{"location":"HowTo/Get-Started/Build-From-Source/#install-ethsigner","text":"Clone the ConsenSys/ethsigner repository: git clone https://github.com/ConsenSys/ethsigner.git","title":"Install EthSigner"},{"location":"HowTo/Get-Started/Build-From-Source/#build-ethsigner_1","text":"Go to the ethsigner directory: cd ethsigner Build EthSigner with the Gradle wrapper gradlew : .\\gradlew build Note To run gradlew , you must have the JAVA_HOME system variable set to the Java installation directory. For example: JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_181 . Go to the distribution directory: cd build\\distributions Expand the distribution archive: tar -xzf ethsigner- < version > .tar.gz Go to the expanded folder and display the EthSigner help to confirm installation. cd ethsigner- < version> bin\\ethsigner --help","title":"Build EthSigner"},{"location":"HowTo/Get-Started/Install-Binaries/","text":"Install binary distribution \u00b6 Prerequisites \u00b6 Java JDK Important EthSigner requires Java 11 or later releases. Install binaries \u00b6 Download the EthSigner packaged binaries . Unpack the downloaded files and change into the ethsigner-<release> directory. Display EthSigner command line help to confirm installation: Linux/macOS bin/ethsigner --help Windows bin\\ethsigner --help","title":"Install binary distribution"},{"location":"HowTo/Get-Started/Install-Binaries/#install-binary-distribution","text":"","title":"Install binary distribution"},{"location":"HowTo/Get-Started/Install-Binaries/#prerequisites","text":"Java JDK Important EthSigner requires Java 11 or later releases.","title":"Prerequisites"},{"location":"HowTo/Get-Started/Install-Binaries/#install-binaries","text":"Download the EthSigner packaged binaries . Unpack the downloaded files and change into the ethsigner-<release> directory. Display EthSigner command line help to confirm installation: Linux/macOS bin/ethsigner --help Windows bin\\ethsigner --help","title":"Install binaries"},{"location":"HowTo/Get-Started/Use-Docker/","text":"Run EthSigner from Docker image \u00b6 A Docker image is provided to run EthSigner in a Docker container. Prerequisites \u00b6 Docker MacOS or Linux Important The Docker image does not run on Windows. Quickstart \u00b6 Display the EthSigner command line help using the Docker image: latest docker run consensys/ethsigner:latest --help Note latest runs the latest cached version. To pull the latest version, use docker pull consensys/ethsigner:latest . You can specify environment variables with the docker image instead of the command line options. example docker run --mount type = bind,source = /home/me/me_node,target = /var/lib/ethsigner -e ETHSIGNER_CONFIG_FILE = /var/lib/ethsigner/config.toml consensys/ethsigner:latest file-based-signer Expose listening port \u00b6 To use the default listening port ( 8545 ) or the port specified using --http-listen-port , you must expose the listening port. To run EthSigner exposing listening port for access: docker run -p <listenPort>:8545 consensys/ethsigner:latest <options> Example To run EthSigner using file-based signing using the default listing port and 8590 as the downstream port: docker run -p <listenPort>:8545 -v <~/myKeyFile>:/opt/ethsigner/keyfile -v <~/myPasswordFile>:/opt/ethsigner/passwordfile consensys/ethsigner:latest --chain-id = 2018 --downstream-http-host = <PantheonHost> --downstream-http-port = 8590 --http-listen-host = 0 .0.0.0 file-based-signer -k /opt/ethsigner/keyfile -p /opt/ethsigner/passwordfile","title":"Run EthSigner from Docker image"},{"location":"HowTo/Get-Started/Use-Docker/#run-ethsigner-from-docker-image","text":"A Docker image is provided to run EthSigner in a Docker container.","title":"Run EthSigner from Docker image"},{"location":"HowTo/Get-Started/Use-Docker/#prerequisites","text":"Docker MacOS or Linux Important The Docker image does not run on Windows.","title":"Prerequisites"},{"location":"HowTo/Get-Started/Use-Docker/#quickstart","text":"Display the EthSigner command line help using the Docker image: latest docker run consensys/ethsigner:latest --help Note latest runs the latest cached version. To pull the latest version, use docker pull consensys/ethsigner:latest . You can specify environment variables with the docker image instead of the command line options. example docker run --mount type = bind,source = /home/me/me_node,target = /var/lib/ethsigner -e ETHSIGNER_CONFIG_FILE = /var/lib/ethsigner/config.toml consensys/ethsigner:latest file-based-signer","title":"Quickstart"},{"location":"HowTo/Get-Started/Use-Docker/#expose-listening-port","text":"To use the default listening port ( 8545 ) or the port specified using --http-listen-port , you must expose the listening port. To run EthSigner exposing listening port for access: docker run -p <listenPort>:8545 consensys/ethsigner:latest <options> Example To run EthSigner using file-based signing using the default listing port and 8590 as the downstream port: docker run -p <listenPort>:8545 -v <~/myKeyFile>:/opt/ethsigner/keyfile -v <~/myPasswordFile>:/opt/ethsigner/passwordfile consensys/ethsigner:latest --chain-id = 2018 --downstream-http-host = <PantheonHost> --downstream-http-port = 8590 --http-listen-host = 0 .0.0.0 file-based-signer -k /opt/ethsigner/keyfile -p /opt/ethsigner/passwordfile","title":"Expose listening port"},{"location":"HowTo/Monitor-Nodes/Metrics/","text":"Use metrics to monitor performance \u00b6 Use the --metrics-enabled option to enable the Prometheus monitoring and alerting service to access EthSigner. Install Prometheus \u00b6 To use Prometheus with EthSigner, install the Prometheus main component . On MacOS, install with Homebrew : brew install prometheus Setting up and running Prometheus with EthSigner \u00b6 To configure Prometheus to run with EthSigner: Configure Prometheus to poll EthSigner. For example, add the following YAML fragment to the the prometheus.yml file: Example configuration global: scrape_interval: 15s scrape_configs: - job_name: \"prometheus\" static_configs: - targets: [\"localhost:9090\"] - job_name: \"ethsigner-prod\" scrape_timeout: 10s metrics_path: /metrics scheme: http static_configs: - targets: [\"localhost:9546\"] Note Alternatively create your own YAML file and add the above example configuration. Start EthSigner with the --metrics-enabled option. ethsigner --chain-id = 2018 \\ --downstream-http-port = 8590 --metrics-enabled = true \\ file-based-signer --key-file = /Users/me/signer/keyFile --password-file = /Users/me/signer/passwordFile The JVM , and PROCESS metrics categories are enabled by default. Use the --metrics-category command line option to update the available categories. Tip To view the full list of available EthSigner metrics view http://<metrics-host>:<metrics-port>/metrics . By default this is http://localhost:9546/metrics . In another terminal, run Prometheus specifying the prometheus.yml file: prometheus --config.file = prometheus.yml View the Prometheus graphical interface . View Prometheus graphical interface \u00b6 Open a web browser to http://localhost:9090 to view the Prometheus graphical interface. Choose Graph from the menu bar and click the Console tab below. From the Insert metric at cursor drop-down, select a metric and click Execute . The values display.","title":"Use metrics"},{"location":"HowTo/Monitor-Nodes/Metrics/#use-metrics-to-monitor-performance","text":"Use the --metrics-enabled option to enable the Prometheus monitoring and alerting service to access EthSigner.","title":"Use metrics to monitor performance"},{"location":"HowTo/Monitor-Nodes/Metrics/#install-prometheus","text":"To use Prometheus with EthSigner, install the Prometheus main component . On MacOS, install with Homebrew : brew install prometheus","title":"Install Prometheus"},{"location":"HowTo/Monitor-Nodes/Metrics/#setting-up-and-running-prometheus-with-ethsigner","text":"To configure Prometheus to run with EthSigner: Configure Prometheus to poll EthSigner. For example, add the following YAML fragment to the the prometheus.yml file: Example configuration global: scrape_interval: 15s scrape_configs: - job_name: \"prometheus\" static_configs: - targets: [\"localhost:9090\"] - job_name: \"ethsigner-prod\" scrape_timeout: 10s metrics_path: /metrics scheme: http static_configs: - targets: [\"localhost:9546\"] Note Alternatively create your own YAML file and add the above example configuration. Start EthSigner with the --metrics-enabled option. ethsigner --chain-id = 2018 \\ --downstream-http-port = 8590 --metrics-enabled = true \\ file-based-signer --key-file = /Users/me/signer/keyFile --password-file = /Users/me/signer/passwordFile The JVM , and PROCESS metrics categories are enabled by default. Use the --metrics-category command line option to update the available categories. Tip To view the full list of available EthSigner metrics view http://<metrics-host>:<metrics-port>/metrics . By default this is http://localhost:9546/metrics . In another terminal, run Prometheus specifying the prometheus.yml file: prometheus --config.file = prometheus.yml View the Prometheus graphical interface .","title":"Setting up and running Prometheus with EthSigner"},{"location":"HowTo/Monitor-Nodes/Metrics/#view-prometheus-graphical-interface","text":"Open a web browser to http://localhost:9090 to view the Prometheus graphical interface. Choose Graph from the menu bar and click the Console tab below. From the Insert metric at cursor drop-down, select a metric and click Execute . The values display.","title":"View Prometheus graphical interface"},{"location":"HowTo/Store-Keys/Use-Azure/","text":"Using EthSigner with Azure Key Vault \u00b6 EthSigner supports storing the signing key in an Azure Key Vault . Storing private key in Azure Key Vault \u00b6 Create a SECP256k1 key in the Azure Key Vault and register EthSigner as an application for the key. Take note of the following to specify when starting EthSigner: Key vault name Key name Key version Client ID File containing client secret for the client ID Start Besu \u00b6 Start Besu with the --rpc-http-port option set to 8590 to avoid conflict with the default EthSigner listening port ( 8545 ). Example besu --network = dev --miner-enabled --miner-coinbase = 0xfe3b557e8fb62b89f4916b721be55ceb828dbd73 --rpc-http-cors-origins = \"all\" --host-allowlist = * --rpc-http-enabled --rpc-http-port = 8590 --data-path = /tmp/tmpDatdir Important EthSigner requires a chain ID to be used when signing transactions. The downstream Ethereum client must be operating in a milestone supporting replay protection. That is, the genesis file must include at least the Spurious Dragon milestone (defined as eip158Block in the genesis file) so the blockchain is using a chain ID. Start EthSigner with Azure Key Vault signing \u00b6 Start EthSigner. Example ethsigner --chain-id = 2018 --downstream-http-port = 8590 azure-signer --client-id = <ClientID> --client-secret-path = mypath/mysecretfile --key-name = <KeyName> --key-version = <KeyVersion> --keyvault-name = <KeyVaultName> Important Use the \u2013http-listen-port option to change the EthSigner listening port if 8545 is in use. You can now use EthSigner to sign transactions with the key stored in the Azure Key Vault.","title":"Use Azure Key Vault"},{"location":"HowTo/Store-Keys/Use-Azure/#using-ethsigner-with-azure-key-vault","text":"EthSigner supports storing the signing key in an Azure Key Vault .","title":"Using EthSigner with Azure Key Vault"},{"location":"HowTo/Store-Keys/Use-Azure/#storing-private-key-in-azure-key-vault","text":"Create a SECP256k1 key in the Azure Key Vault and register EthSigner as an application for the key. Take note of the following to specify when starting EthSigner: Key vault name Key name Key version Client ID File containing client secret for the client ID","title":"Storing private key in Azure Key Vault"},{"location":"HowTo/Store-Keys/Use-Azure/#start-besu","text":"Start Besu with the --rpc-http-port option set to 8590 to avoid conflict with the default EthSigner listening port ( 8545 ). Example besu --network = dev --miner-enabled --miner-coinbase = 0xfe3b557e8fb62b89f4916b721be55ceb828dbd73 --rpc-http-cors-origins = \"all\" --host-allowlist = * --rpc-http-enabled --rpc-http-port = 8590 --data-path = /tmp/tmpDatdir Important EthSigner requires a chain ID to be used when signing transactions. The downstream Ethereum client must be operating in a milestone supporting replay protection. That is, the genesis file must include at least the Spurious Dragon milestone (defined as eip158Block in the genesis file) so the blockchain is using a chain ID.","title":"Start Besu"},{"location":"HowTo/Store-Keys/Use-Azure/#start-ethsigner-with-azure-key-vault-signing","text":"Start EthSigner. Example ethsigner --chain-id = 2018 --downstream-http-port = 8590 azure-signer --client-id = <ClientID> --client-secret-path = mypath/mysecretfile --key-name = <KeyName> --key-version = <KeyVersion> --keyvault-name = <KeyVaultName> Important Use the \u2013http-listen-port option to change the EthSigner listening port if 8545 is in use. You can now use EthSigner to sign transactions with the key stored in the Azure Key Vault.","title":"Start EthSigner with Azure Key Vault signing"},{"location":"HowTo/Store-Keys/Use-Hashicorp/","text":"Using EthSigner with HashiCorp Vault \u00b6 EthSigner supports storing the signing key in HashiCorp Vault . This example uses a HashiCorp development server without TLS and disables TLS when starting EthSigner. TLS is enabled by default between EthSigner and HashiCorp Vault and must be configured when not explicitly disabled. Caution We do not recommented disabling TLS in production environments. Storing private key in HashiCorp Vault \u00b6 After installing HashiCorp Vault and starting the server : Set the VAULT_ADDR environment variable using the command displayed after starting the server: export VAULT_ADDR = 'http://127.0.0.1:8200' Save the root token displayed after starting the server in a file called authFile . Put your signing key into the HashiCorp Vault: Command vault kv put secret/ethsignerSigningKey value = <Private Key without 0x prefix> Example vault kv put secret/ethsignerSigningKey value = 8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63 The private key is stored in the default location for EthSigner. The key must be a base 64 encoded private key for ECDSA for curve secp256k1. Start Besu \u00b6 Start Besu with the --rpc-http-port option set to 8590 to avoid conflict with the default EthSigner listening port ( 8545 ). Example besu --network = dev --miner-enabled --miner-coinbase = 0xfe3b557e8fb62b89f4916b721be55ceb828dbd73 --rpc-http-cors-origins = \"all\" --host-allowlist = * --rpc-http-enabled --rpc-http-port = 8590 --data-path = /tmp/tmpDatdir Important EthSigner requires a chain ID to be used when signing transactions. The downstream Ethereum client must be operating in a milestone supporting replay protection. That is, the genesis file must include at least the Spurious Dragon milestone (defined as eip158Block in the genesis file) so the blockchain is using a chain ID. Start EthSigner with HashiCorp Vault signing \u00b6 Start EthSigner. Example ethsigner --chain-id = 2018 --downstream-http-port = 8590 hashicorp-signer --host = 127 .0.0.1 --port = 8200 --auth-file = authFile --tls-enabled = false --signing-key-path = /v1/secret/data/ethsignerSigningKey The path to the key in the HashiCorp Vault specified by --signing-key-path is prefixed by the key version and includes data . For example, if the following command is used put the key into the Vault: vault kv put secret/ethsignerSigningKey value=<Private Key> The path specified for --signing-key-path is /v1/secret/data/ethsignerSigningKey Tip Use the \u2013http-listen-port option to change the EthSigner listening port if 8545 is in use. You can now use EthSigner to sign transactions with the key stored in the HashiCorp Vault.","title":"Use Hashicorp Vault"},{"location":"HowTo/Store-Keys/Use-Hashicorp/#using-ethsigner-with-hashicorp-vault","text":"EthSigner supports storing the signing key in HashiCorp Vault . This example uses a HashiCorp development server without TLS and disables TLS when starting EthSigner. TLS is enabled by default between EthSigner and HashiCorp Vault and must be configured when not explicitly disabled. Caution We do not recommented disabling TLS in production environments.","title":"Using EthSigner with HashiCorp Vault"},{"location":"HowTo/Store-Keys/Use-Hashicorp/#storing-private-key-in-hashicorp-vault","text":"After installing HashiCorp Vault and starting the server : Set the VAULT_ADDR environment variable using the command displayed after starting the server: export VAULT_ADDR = 'http://127.0.0.1:8200' Save the root token displayed after starting the server in a file called authFile . Put your signing key into the HashiCorp Vault: Command vault kv put secret/ethsignerSigningKey value = <Private Key without 0x prefix> Example vault kv put secret/ethsignerSigningKey value = 8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63 The private key is stored in the default location for EthSigner. The key must be a base 64 encoded private key for ECDSA for curve secp256k1.","title":"Storing private key in HashiCorp Vault"},{"location":"HowTo/Store-Keys/Use-Hashicorp/#start-besu","text":"Start Besu with the --rpc-http-port option set to 8590 to avoid conflict with the default EthSigner listening port ( 8545 ). Example besu --network = dev --miner-enabled --miner-coinbase = 0xfe3b557e8fb62b89f4916b721be55ceb828dbd73 --rpc-http-cors-origins = \"all\" --host-allowlist = * --rpc-http-enabled --rpc-http-port = 8590 --data-path = /tmp/tmpDatdir Important EthSigner requires a chain ID to be used when signing transactions. The downstream Ethereum client must be operating in a milestone supporting replay protection. That is, the genesis file must include at least the Spurious Dragon milestone (defined as eip158Block in the genesis file) so the blockchain is using a chain ID.","title":"Start Besu"},{"location":"HowTo/Store-Keys/Use-Hashicorp/#start-ethsigner-with-hashicorp-vault-signing","text":"Start EthSigner. Example ethsigner --chain-id = 2018 --downstream-http-port = 8590 hashicorp-signer --host = 127 .0.0.1 --port = 8200 --auth-file = authFile --tls-enabled = false --signing-key-path = /v1/secret/data/ethsignerSigningKey The path to the key in the HashiCorp Vault specified by --signing-key-path is prefixed by the key version and includes data . For example, if the following command is used put the key into the Vault: vault kv put secret/ethsignerSigningKey value=<Private Key> The path specified for --signing-key-path is /v1/secret/data/ethsignerSigningKey Tip Use the \u2013http-listen-port option to change the EthSigner listening port if 8545 is in use. You can now use EthSigner to sign transactions with the key stored in the HashiCorp Vault.","title":"Start EthSigner with HashiCorp Vault signing"},{"location":"HowTo/Transactions/Make-Transactions/","text":"Make transactions \u00b6 EthSigner provides transaction signing and access to your keystore by implementing the following JSON-RPC methods: eea_sendTransaction eth_accounts eth_sendTransaction The sender specified in eea_sendTransaction and eth_sendTransaction requires a signing key. Signing keys can be stored externally or locally . Note If using EthSigner with GoQuorum for public transactions (that is, using eth_sendTransaction ), the nonce must be specified.","title":"Make transactions"},{"location":"HowTo/Transactions/Make-Transactions/#make-transactions","text":"EthSigner provides transaction signing and access to your keystore by implementing the following JSON-RPC methods: eea_sendTransaction eth_accounts eth_sendTransaction The sender specified in eea_sendTransaction and eth_sendTransaction requires a signing key. Signing keys can be stored externally or locally . Note If using EthSigner with GoQuorum for public transactions (that is, using eth_sendTransaction ), the nonce must be specified.","title":"Make transactions"},{"location":"Reference/API-Methods/","text":"EthSigner API methods \u00b6 Attention All JSON-RPC HTTP examples use the default host and port endpoint http://127.0.0.1:8545 . If using the --http-listen-host or --http-listen-port options, update the endpoint. The examples use Hyperledger Besu, but any Ethereum client can be used. EEA methods \u00b6 eea_sendTransaction \u00b6 Creates and signs a private transaction using the signing key . EthSigner submits the signed transaction to Besu using eea_sendRawTransaction . Note Besu uses a Transaction Manager to implement privacy. Tessera is the Transaction Manager used in this documentation but EthSigner can be used with other Transaction Managers. Parameters \u00b6 Transaction object for private transactions: Key Type Required/Optional Value from Data, 20 bytes Required Address of the sender. Must be the address of the keystore account. to Data, 20 bytes Not required for contract creation null for contract creation transaction. Contract address for contract invocation transactions. gas Quantity Optional Gas provided by the sender. Default is 90000 . gasPrice Quantity Optional Gas price provided by the sender in Wei. Default is 0 . nonce Quantity Optional Number of transactions sent from the from account before this one. data Quantity Optional Compiled contract code or hash of the invoked method signature and encoded parameters. privateFrom Data, 20 bytes Required Tessera address of the sender privateFor or privacyGroupId Array of data or data Required Tessera addresses of recipients or privacy group ID restriction String Required Must be restricted Tip Submitting a transaction with the same nonce as a pending transaction and a higher gas price replaces the pending transaction with the new one. Use priv_getTransactionCount to calculate the nonce. If not attempting to replace a pending transaction, do not include the nonce in the private transaction object and nonce management is handled automatically. Note If a non-zero value is included in the transaction object, an error is returned. Ether transfers cannot be private transactions. Returns \u00b6 result : data - Transaction hash Example curl HTTP request with privateFor curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eea_sendTransaction\",\"params\":[{\"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\"data\": \"0x608060405234801561001057600080fd5b5060dc8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fa4f24514604e57806355241077146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a6565b005b60005481565b80600081905550505600a165627a7a723058202bdbba2e694dba8fff33d9d0976df580f57bff0a40e25a46c398f8063b4c00360029\", \"privateFrom\": \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\",\"privateFor\": [\"g59BmTeJIn7HIcnq8VQWgyh/pDbvbt2eyP0Ii60aDDw=\"],\"restriction\": \"restricted\"}], \"id\":1}' http://127.0.0.1:8545 curl HTTP request with privacy group ID curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eea_sendTransaction\",\"params\":[{\"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\"data\": \"0x608060405234801561001057600080fd5b5060d8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fa4f24514604e57806355241077146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a6565b005b60005481565b80600081905550505600a165627a7a723058202bdbba2e694dba8fff33d9d0976df580f57bff0a40e25a46c398f8063b4c00360029\", \"privateFrom\": \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\",\"privacyGroupId\": \"kAbelwaVW7okoEn1+okO+AbA4Hhz/7DaCOWVQz9nx5M=\",\"restriction\": \"restricted\"}], \"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x6052dd2131667ef3e0a0666f2812db2defceaec91c470bb43de92268e8306778\" } Eth methods \u00b6 eth_accounts \u00b6 Returns the account address with which EthSigner is signing transactions. That is, the account of the signing key . Returns multiple accounts if multiple signers are configured. Parameters \u00b6 None Returns \u00b6 Array of data : Account address with which EthSigner is signing transactions. Example curl HTTP request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_accounts\",\"params\":[],\"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" :[ \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\" ] } eth_sendTransaction \u00b6 Creates and signs a transaction using the signing key . EthSigner submits the signed transaction to Besu using eth_sendRawTransaction . Parameters \u00b6 Transaction object: Key Type Required/Optional Value from Data, 20 bytes Required Address of the sender. to Data, 20 bytes Optional for contract creation Address of the receiver. null if a contract creation transaction. gas Quantity Optional Gas provided by the sender. Default is 90000 . gasPrice Quantity Optional Gas price provided by the sender in Wei. Default is 0 . nonce Quantity Optional Number of transactions made by the sender before this one. Must be specified if using GoQuorum . value Quantity Optional Value transferred in Wei. data Quantity Optional Compiled contract code or hash of the invoked method signature and encoded parameters. Tip Submitting a transaction with the same nonce as a pending transaction and a higher gas price replaces the pending transaction with the new one. Returns \u00b6 result : data - 32-byte transaction hash Example curl HTTP request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendTransaction\",\"params\":[{\"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\"gas\": \"0x7600\",\"gasPrice\": \"0x9184e72a000\",\"value\": \"0x9184e72a\"}], \"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x6052dd2131667ef3e0a0666f2812db2defceaec91c470bb43de92268e8306778\" } eth_sign \u00b6 Calculates an Ethereum specific signature using sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))).\" Adds a prefix to the message that makes the calculated signature recognisable as an Ethereum specific signature. This prevents misuse where a malicious DApp signs arbitrary data (for example a transaction) and uses the signature to impersonate the victim. Parameters \u00b6 DATA : 20-byte account address DATA : data string to sign Returns \u00b6 DATA : Signature Example curl HTTP request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_sign\",\"params\":[\"0x78e6e236592597c09d5c137c2af40aecd42d12a2\", \"0x2eadbe1f\"], \"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0xa6122e277f46fea78f3e97d3354a03ad20b2296733dfefbadc7305c80e70ce9826d44f12ab5aa488689744657491c70d3b654d7f60f8f50beefac9abcf02a4cf1b\" } eth_signTransaction \u00b6 Signs a transaction that can be submitted to Besu at a later time using eth_sendRawTransaction . Parameters \u00b6 Transaction object: Key Type Required/Optional Value from Data, 20 bytes Required Address of the sender. to Data, 20 bytes Optional for contract creation Address of the receiver. null if a contract creation transaction. gas Quantity Optional Gas provided by the sender. Default is 90000 . gasPrice Quantity Optional Gas price provided by the sender in Wei. Default is 0 . nonce Quantity Optional Number of transactions made by the sender before this one. Must be specified if using GoQuorum . value Quantity Optional Value transferred in Wei. data Quantity Optional Compiled contract code or hash of the invoked method signature and encoded parameters. Returns \u00b6 result : data - The signed transaction object. Example curl HTTP request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_signTransaction\",\"params\":[{\"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\"gas\": \"0x7600\",\"gasPrice\": \"0x9184e72a000\",\"value\": \"0x9184e72a\", \"nonce\":\"0x46\"}], \"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\" }","title":"API methods"},{"location":"Reference/API-Methods/#ethsigner-api-methods","text":"Attention All JSON-RPC HTTP examples use the default host and port endpoint http://127.0.0.1:8545 . If using the --http-listen-host or --http-listen-port options, update the endpoint. The examples use Hyperledger Besu, but any Ethereum client can be used.","title":"EthSigner API methods"},{"location":"Reference/API-Methods/#eea-methods","text":"","title":"EEA methods"},{"location":"Reference/API-Methods/#eea_sendtransaction","text":"Creates and signs a private transaction using the signing key . EthSigner submits the signed transaction to Besu using eea_sendRawTransaction . Note Besu uses a Transaction Manager to implement privacy. Tessera is the Transaction Manager used in this documentation but EthSigner can be used with other Transaction Managers.","title":"eea_sendTransaction"},{"location":"Reference/API-Methods/#parameters","text":"Transaction object for private transactions: Key Type Required/Optional Value from Data, 20 bytes Required Address of the sender. Must be the address of the keystore account. to Data, 20 bytes Not required for contract creation null for contract creation transaction. Contract address for contract invocation transactions. gas Quantity Optional Gas provided by the sender. Default is 90000 . gasPrice Quantity Optional Gas price provided by the sender in Wei. Default is 0 . nonce Quantity Optional Number of transactions sent from the from account before this one. data Quantity Optional Compiled contract code or hash of the invoked method signature and encoded parameters. privateFrom Data, 20 bytes Required Tessera address of the sender privateFor or privacyGroupId Array of data or data Required Tessera addresses of recipients or privacy group ID restriction String Required Must be restricted Tip Submitting a transaction with the same nonce as a pending transaction and a higher gas price replaces the pending transaction with the new one. Use priv_getTransactionCount to calculate the nonce. If not attempting to replace a pending transaction, do not include the nonce in the private transaction object and nonce management is handled automatically. Note If a non-zero value is included in the transaction object, an error is returned. Ether transfers cannot be private transactions.","title":"Parameters"},{"location":"Reference/API-Methods/#returns","text":"result : data - Transaction hash Example curl HTTP request with privateFor curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eea_sendTransaction\",\"params\":[{\"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\"data\": \"0x608060405234801561001057600080fd5b5060dc8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fa4f24514604e57806355241077146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a6565b005b60005481565b80600081905550505600a165627a7a723058202bdbba2e694dba8fff33d9d0976df580f57bff0a40e25a46c398f8063b4c00360029\", \"privateFrom\": \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\",\"privateFor\": [\"g59BmTeJIn7HIcnq8VQWgyh/pDbvbt2eyP0Ii60aDDw=\"],\"restriction\": \"restricted\"}], \"id\":1}' http://127.0.0.1:8545 curl HTTP request with privacy group ID curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eea_sendTransaction\",\"params\":[{\"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\"data\": \"0x608060405234801561001057600080fd5b5060d8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633fa4f24514604e57806355241077146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a6565b005b60005481565b80600081905550505600a165627a7a723058202bdbba2e694dba8fff33d9d0976df580f57bff0a40e25a46c398f8063b4c00360029\", \"privateFrom\": \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\",\"privacyGroupId\": \"kAbelwaVW7okoEn1+okO+AbA4Hhz/7DaCOWVQz9nx5M=\",\"restriction\": \"restricted\"}], \"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x6052dd2131667ef3e0a0666f2812db2defceaec91c470bb43de92268e8306778\" }","title":"Returns"},{"location":"Reference/API-Methods/#eth-methods","text":"","title":"Eth methods"},{"location":"Reference/API-Methods/#eth_accounts","text":"Returns the account address with which EthSigner is signing transactions. That is, the account of the signing key . Returns multiple accounts if multiple signers are configured.","title":"eth_accounts"},{"location":"Reference/API-Methods/#parameters_1","text":"None","title":"Parameters"},{"location":"Reference/API-Methods/#returns_1","text":"Array of data : Account address with which EthSigner is signing transactions. Example curl HTTP request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_accounts\",\"params\":[],\"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" :[ \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\" ] }","title":"Returns"},{"location":"Reference/API-Methods/#eth_sendtransaction","text":"Creates and signs a transaction using the signing key . EthSigner submits the signed transaction to Besu using eth_sendRawTransaction .","title":"eth_sendTransaction"},{"location":"Reference/API-Methods/#parameters_2","text":"Transaction object: Key Type Required/Optional Value from Data, 20 bytes Required Address of the sender. to Data, 20 bytes Optional for contract creation Address of the receiver. null if a contract creation transaction. gas Quantity Optional Gas provided by the sender. Default is 90000 . gasPrice Quantity Optional Gas price provided by the sender in Wei. Default is 0 . nonce Quantity Optional Number of transactions made by the sender before this one. Must be specified if using GoQuorum . value Quantity Optional Value transferred in Wei. data Quantity Optional Compiled contract code or hash of the invoked method signature and encoded parameters. Tip Submitting a transaction with the same nonce as a pending transaction and a higher gas price replaces the pending transaction with the new one.","title":"Parameters"},{"location":"Reference/API-Methods/#returns_2","text":"result : data - 32-byte transaction hash Example curl HTTP request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendTransaction\",\"params\":[{\"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\"gas\": \"0x7600\",\"gasPrice\": \"0x9184e72a000\",\"value\": \"0x9184e72a\"}], \"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0x6052dd2131667ef3e0a0666f2812db2defceaec91c470bb43de92268e8306778\" }","title":"Returns"},{"location":"Reference/API-Methods/#eth_sign","text":"Calculates an Ethereum specific signature using sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))).\" Adds a prefix to the message that makes the calculated signature recognisable as an Ethereum specific signature. This prevents misuse where a malicious DApp signs arbitrary data (for example a transaction) and uses the signature to impersonate the victim.","title":"eth_sign"},{"location":"Reference/API-Methods/#parameters_3","text":"DATA : 20-byte account address DATA : data string to sign","title":"Parameters"},{"location":"Reference/API-Methods/#returns_3","text":"DATA : Signature Example curl HTTP request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_sign\",\"params\":[\"0x78e6e236592597c09d5c137c2af40aecd42d12a2\", \"0x2eadbe1f\"], \"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0xa6122e277f46fea78f3e97d3354a03ad20b2296733dfefbadc7305c80e70ce9826d44f12ab5aa488689744657491c70d3b654d7f60f8f50beefac9abcf02a4cf1b\" }","title":"Returns"},{"location":"Reference/API-Methods/#eth_signtransaction","text":"Signs a transaction that can be submitted to Besu at a later time using eth_sendRawTransaction .","title":"eth_signTransaction"},{"location":"Reference/API-Methods/#parameters_4","text":"Transaction object: Key Type Required/Optional Value from Data, 20 bytes Required Address of the sender. to Data, 20 bytes Optional for contract creation Address of the receiver. null if a contract creation transaction. gas Quantity Optional Gas provided by the sender. Default is 90000 . gasPrice Quantity Optional Gas price provided by the sender in Wei. Default is 0 . nonce Quantity Optional Number of transactions made by the sender before this one. Must be specified if using GoQuorum . value Quantity Optional Value transferred in Wei. data Quantity Optional Compiled contract code or hash of the invoked method signature and encoded parameters.","title":"Parameters"},{"location":"Reference/API-Methods/#returns_4","text":"result : data - The signed transaction object. Example curl HTTP request curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_signTransaction\",\"params\":[{\"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\"gas\": \"0x7600\",\"gasPrice\": \"0x9184e72a000\",\"value\": \"0x9184e72a\", \"nonce\":\"0x46\"}], \"id\":1}' http://127.0.0.1:8545 JSON result { \"jsonrpc\" : \"2.0\" , \"id\" : 1 , \"result\" : \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\" }","title":"Returns"},{"location":"Reference/Multikey-Parameters/","text":"Multikey parameters \u00b6 The optional [metadata] section in the TOML files contains data that is not required by EthSigner. The [signing] section contains the parameters required for the signing type. Important All parameters in the [signing] section are mandatory. File-based signing \u00b6 Example [metadata] createdAt = 1994-11-05T08:15:30-05:00 description = \"Example of a File based configuration\" [signing] type = \"file-based-signer\" key-file = \"/Users/me/project/78e6e236592597c09d5c137c2af40aecd42d12a2.key\" password-file = \"/Users/me/project/78e6e236592597c09d5c137c2af40aecd42d12a2.password\" Note EthSigner supports absolute paths or relative paths when specifying key-file and password-file . Relative paths are relative to the directory specified in the multikey-signer --directory subcommand. Key Description type Type of key signing. Use file-based-signer key-file V3 keystore file containing the key with which transactions are signed password-file File containing the password for the key with which transactions are signed . HashiCorp Vault signing \u00b6 Example [metadata] createdAt = 2019-07-01T12:11:30Z description = \"Example of a valid HashiCorp based configuration\" [signing] type = \"hashicorp-signer\" keyPath = \"/v1/secret/data/ethsignerKey\" keyName = \"value\" token = \"root_token\" serverHost = \"localhost\" serverPort = 8200 timeout = 5000 tlsEnabled = true tlsTrustStoreType = \"ALLOWLIST\" tlsTrustStorePath = \"/Users/me/project/knownHashicorpServers\" Note The value of keyPath is dependent on how HashiCorp Vault secret engine is configured. It\u2019s usually in the format of /v1/<secret-engine-name>/data/<secret-path> . For example, in HashiCorp Vault dev mode, a default secret engine with name secret is created. Creating a path EthSignerKeys in secret would result in the keyPath value to be /v1/secret/data/EthSignerKeys . Key Description type Type of key signing. Use hashicorp-signer keyPath Path to secret in the HashiCorp Vault containing the private key for signing transactions. keyName Name of the key that maps to the private key in the secret. Defaults to value . token HashiCorp Vault authentication token that is required to access the secret defined by the keyPath . serverHost Host of the HashiCorp Vault server. serverPort Port of the HashiCorp Vault server. Defaults to 8200 . timeout Timeout in milliseconds for requests to the HashiCorp Vault server. Defaults to 10000 . tlsEnable Enable/Disable TLS communication with HashiCorp Vault server. Defaults to true . tlsTrustStoreType The type of Truststore that stores HashiCorp Vault server TLS certificate. Valid values are ALLOWLIST , JKS , PKCS12 and PEM . Can be omitted if HashiCorp server\u2019s CA is already trusted. tlsTrustStorePath Path to the Truststore file. Required when tlsTrustStoreType is specified. See example of how to create an ALLOWLIST Truststore file . tlsTrustStorePassword Password to decrypt truststore file. Only required for JKS and PKCS12 truststore types. Azure Key Vault signing \u00b6 Example [metadata] createdAt = 2011-11-01T12:15:30Z description = \"Example of an Azure Key Vault based configuration\" [signing] type = \"azure-signer\" key-vault-name = \"AzureKeyVault\" key-name = \"ethsignerKey\" key-version = \"7c01fe58d68148bba5824ce418241092\" client-id = \"47efee5c-8079-4b48-31bb4f2e9a22\" client-secret = \"TW_3Uc/HLPdpLp5*om@MGcd1T29MuP*5\" tenant-id = \"34255fb0-379b-4a1a-bd47-d211ab86df81\" Key Description type Type of key signing. Use azure-signer key-vault-name Name of the vault to access. Sub-domain of vault.azure.net key-name Name of key to be used key-version Version of the specified key client-id ID used to authenticate with Azure Key Vault client-secret Secret used to access the vault tenant-id The tenant ID used to authenticate with Azure Key Vault.","title":"Multikey TOML parameters"},{"location":"Reference/Multikey-Parameters/#multikey-parameters","text":"The optional [metadata] section in the TOML files contains data that is not required by EthSigner. The [signing] section contains the parameters required for the signing type. Important All parameters in the [signing] section are mandatory.","title":"Multikey parameters"},{"location":"Reference/Multikey-Parameters/#file-based-signing","text":"Example [metadata] createdAt = 1994-11-05T08:15:30-05:00 description = \"Example of a File based configuration\" [signing] type = \"file-based-signer\" key-file = \"/Users/me/project/78e6e236592597c09d5c137c2af40aecd42d12a2.key\" password-file = \"/Users/me/project/78e6e236592597c09d5c137c2af40aecd42d12a2.password\" Note EthSigner supports absolute paths or relative paths when specifying key-file and password-file . Relative paths are relative to the directory specified in the multikey-signer --directory subcommand. Key Description type Type of key signing. Use file-based-signer key-file V3 keystore file containing the key with which transactions are signed password-file File containing the password for the key with which transactions are signed .","title":"File-based signing"},{"location":"Reference/Multikey-Parameters/#hashicorp-vault-signing","text":"Example [metadata] createdAt = 2019-07-01T12:11:30Z description = \"Example of a valid HashiCorp based configuration\" [signing] type = \"hashicorp-signer\" keyPath = \"/v1/secret/data/ethsignerKey\" keyName = \"value\" token = \"root_token\" serverHost = \"localhost\" serverPort = 8200 timeout = 5000 tlsEnabled = true tlsTrustStoreType = \"ALLOWLIST\" tlsTrustStorePath = \"/Users/me/project/knownHashicorpServers\" Note The value of keyPath is dependent on how HashiCorp Vault secret engine is configured. It\u2019s usually in the format of /v1/<secret-engine-name>/data/<secret-path> . For example, in HashiCorp Vault dev mode, a default secret engine with name secret is created. Creating a path EthSignerKeys in secret would result in the keyPath value to be /v1/secret/data/EthSignerKeys . Key Description type Type of key signing. Use hashicorp-signer keyPath Path to secret in the HashiCorp Vault containing the private key for signing transactions. keyName Name of the key that maps to the private key in the secret. Defaults to value . token HashiCorp Vault authentication token that is required to access the secret defined by the keyPath . serverHost Host of the HashiCorp Vault server. serverPort Port of the HashiCorp Vault server. Defaults to 8200 . timeout Timeout in milliseconds for requests to the HashiCorp Vault server. Defaults to 10000 . tlsEnable Enable/Disable TLS communication with HashiCorp Vault server. Defaults to true . tlsTrustStoreType The type of Truststore that stores HashiCorp Vault server TLS certificate. Valid values are ALLOWLIST , JKS , PKCS12 and PEM . Can be omitted if HashiCorp server\u2019s CA is already trusted. tlsTrustStorePath Path to the Truststore file. Required when tlsTrustStoreType is specified. See example of how to create an ALLOWLIST Truststore file . tlsTrustStorePassword Password to decrypt truststore file. Only required for JKS and PKCS12 truststore types.","title":"HashiCorp Vault signing"},{"location":"Reference/Multikey-Parameters/#azure-key-vault-signing","text":"Example [metadata] createdAt = 2011-11-01T12:15:30Z description = \"Example of an Azure Key Vault based configuration\" [signing] type = \"azure-signer\" key-vault-name = \"AzureKeyVault\" key-name = \"ethsignerKey\" key-version = \"7c01fe58d68148bba5824ce418241092\" client-id = \"47efee5c-8079-4b48-31bb4f2e9a22\" client-secret = \"TW_3Uc/HLPdpLp5*om@MGcd1T29MuP*5\" tenant-id = \"34255fb0-379b-4a1a-bd47-d211ab86df81\" Key Description type Type of key signing. Use azure-signer key-vault-name Name of the vault to access. Sub-domain of vault.azure.net key-name Name of key to be used key-version Version of the specified key client-id ID used to authenticate with Azure Key Vault client-secret Secret used to access the vault tenant-id The tenant ID used to authenticate with Azure Key Vault.","title":"Azure Key Vault signing"},{"location":"Reference/Responsible-Disclosure/","text":"Responsible disclosure policy \u00b6 At ConsenSys, security is a priority. But regardless of how much effort we put into system security, there may still be vulnerabilities present. If you discover a vulnerability, we want to know about it so we can take steps to address it as quickly as possible. You can help us better protect our clients and our systems. Please do the following: E-mail your findings to private-quorum@consensys.net . Provide sufficient information to reproduce the problem, so we can resolve it as quickly as possible. Do not take advantage of the vulnerability you have discovered. Practice responsible disclosure. That is, don\u2019t reveal the problem to others until either: We have released a fix for the disclosure, or 90 days have passed, or We waive responsible disclosure. We will acknowledge receipt of your vulnerability report the next business day and send you regular updates about our progress.","title":"Security disclosure policy"},{"location":"Reference/Responsible-Disclosure/#responsible-disclosure-policy","text":"At ConsenSys, security is a priority. But regardless of how much effort we put into system security, there may still be vulnerabilities present. If you discover a vulnerability, we want to know about it so we can take steps to address it as quickly as possible. You can help us better protect our clients and our systems. Please do the following: E-mail your findings to private-quorum@consensys.net . Provide sufficient information to reproduce the problem, so we can resolve it as quickly as possible. Do not take advantage of the vulnerability you have discovered. Practice responsible disclosure. That is, don\u2019t reveal the problem to others until either: We have released a fix for the disclosure, or 90 days have passed, or We waive responsible disclosure. We will acknowledge receipt of your vulnerability report the next business day and send you regular updates about our progress.","title":"Responsible disclosure policy"},{"location":"Reference/CLI/CLI-Subcommands/","text":"Subcommands \u00b6 EthSigner signs transaction with a key stored in an encrypted file or an external vault. The EthSigner subcommands are used to specify the keys used to sign transactions: ethsigner [Options] file-based-signer [File Options] ethsigner [Options] hashicorp-signer [Hashicorp Options] ethsigner [Options] azure-signer [Azure Options] ethsigner [Options] multikey-signer [Multikey Options] The file-based-signer , hashicorp-signer , and azure-signer subcommands are used for single keys only , and the multikey-signer subcommand is used for one or more keys . Important Only one signing key subcommand can be used. Specifying subcommand options \u00b6 The subcommand to use must be specified on the command line, but the subcommand options can be specified: On the command line As environment variables In a TOML configuration file. For example, you can set the options for the azure-signer subcommand in environment variables or a configuration file, but the subcommand must be specified in the command line Example ethsigner --config-file = ./config.toml azure-signer If you specify an option in more than one place, the order of priority is command line, environment variable, configuration file. Environment variables \u00b6 For each subcommand option, the equivalent environment variable is: Upper-case _ replaces - Has an ETHSIGNER_ + <SIGNING_OPTION>_ prefix. For example set azure-signer --client-id using the ETHSIGNER_AZURE_SIGNER_CLIENT_ID environment variable. Note Only subcommand options can be set in environment variables. The actual subcommand must be specified in the command line. View help \u00b6 To view the command line help for the subcommands: ethsigner help file-based-signer ethsigner help hashicorp-signer ethsigner help azure-signer ethsigner help multikey-signer Options \u00b6 file-based-signer \u00b6 key-file \u00b6 File containing key with which transactions are signed . Syntax -k, --key-file = <keyFile> Example --key-file = /Users/me/my_node/transactionKey Environment variable ETHSIGNER_FILE_BASED_SIGNER_KEY_FILE = /Users/me/my_node/transactionKey Configuration file file-based-signer.key-file = \"/Users/me/my_node/transactionKey\" password-file \u00b6 File containing password for the key with which transactions are signed . Syntax -p, --password-file = <passwordFile> Example --password-file = /Users/me/my_node/password Environment variable ETHSIGNER_FILE_BASED_SIGNER_PASSWORD_FILE = /Users/me/my_node/password Configuration file file-based-signer.password-file = \"/Users/me/my_node/password\" hashicorp-signer \u00b6 auth-file \u00b6 File containing authentication data for HashiCorp Vault. The authentication data is the root token displayed by the HashiCorp Vault server . Syntax --auth-file = <authFile> Example --auth-file = /Users/me/my_node/auth_file Environment variable ETHSIGNER_HASHICORP_SIGNER_AUTH_FILE = /Users/me/my_node/auth_file Configuration file hashicorp-signer.auth-file = \"/Users/me/my_node/auth_file\" host \u00b6 Host of the HashiCorp Vault server. Default is localhost . Syntax --host = <serverHost> Example --host = \"10.0.0.3\" Environment variable ETHSIGNER_HASHICORP_SIGNER_HOST = 10 .0.0.3 Configuration file hashicorp-signer.host = \"10.0.0.3\" port \u00b6 Port of the HashiCorp Vault server. Default is 8200. Syntax --port = <serverPort> Example --port = 23000 Environment variable ETHSIGNER_HASHICORP_SIGNER_PORT = 23000 Configuration file hashicorp-signer.port = 23000 signing-key-path \u00b6 Path to secret in the HashiCorp Vault containing the private key for signing transactions. Default is /secret/data/ethsignerSigningKey . Syntax --signing-key-path = <signingKeyPath> Example --signing-key-path = /my_secret/ethsignerSigningKey Environment variable ETHSIGNER_HASHICORP_SIGNER_SIGNING_KEY_PATH = /my_secret/ethsignerSigningKey Configuration file hashicorp-signer.signing-key-path = \"/my_secret/ethsignerSigningKey\" timeout \u00b6 Timeout in milliseconds for requests to the HashiCorp Vault server. Default is 10000. Syntax --timeout = <timeout> Example --timeout = 5000 Environment variable ETHSIGNER_HASHICORP_SIGNER_TIMEOUT = 5000 Configuration file hashicorp-signer.timeout = 5000 tls-enabled \u00b6 Connect to HashiCorp Vault server using TLS. Default is true . Syntax --tls-enabled [= <true | false> ] Example --tls-enabled = false Environment variable ETHSIGNER_HASHICORP_SIGNER_TLS_ENABLED = false Configuration file hashicorp-signer.tls-enabled = false tls-known-server-file \u00b6 File containing the hostname, port, and SHA256 certificate fingerprint of the HashiCorp Vault server. Syntax --tls-known-server-file = <hashicorpServerFile> Example --tls-known-server-file = /Users/me/my_node/knownHashicorpServers Environment variable ETHSIGNER_HASHICORP_SIGNER_TLS_KNOWN_SERVER_FILE = /Users/me/my_node/knownHashicorpServers Configuration file hashicorp-signer.tls-known-server-file = \"/Users/me/my_node/knownHashicorpServers\" azure-signer \u00b6 client-id \u00b6 ID used to authenticate with Azure Key Vault. Syntax --client-id = <clientID> Example --client-id = \"MyClientID\" Environment variable ETHSIGNER_AZURE_SIGNER_CLIENT_ID = MyClientID Configuration file azure-signer.client-id = \"MyClientID\" client-secret-path \u00b6 Path to file containing secret used to access the vault. Syntax --client-secret-path = <clientSecretPath> Example --client-secret-path = /Path/MySecret Environment variable ETHSIGNER_AZURE_SIGNER_CLIENT_SECRET_PATH = \"/Path/MySecret\" Configuration file azure-signer.client-secret-path = /Path/MySecret key-name \u00b6 Name of key to be used. Syntax --key-name = <keyName> Example --key-name = \"MyKey\" Environment variable ETHSIGNER_AZURE_SIGNER_KEY_NAME = MyKey Configuration file azure-signer.key-name = \"MyKey\" key-version \u00b6 Version of the specified key to use. Syntax --key-version = <keyVersion> Example --key-version = \"7c01fe58d68148bba5824ce418241092\" Environment variable ETHSIGNER_AZURE_SIGNER_KEY_VERSION = 7c01fe58d68148bba5824ce418241092 Configuration file azure-signer.key-version = \"7c01fe58d68148bba5824ce418241092\" keyvault-name , key-vault-name \u00b6 Name of the vault to access. Sub-domain of vault.azure.net . Syntax --keyvault-name = <keyVaultName> Example --keyvault-name = \"MyKeyVault\" Environment variable ETHSIGNER_AZURE_SIGNER_KEY_VAULT_NAME = MyKeyVault Configuration file azure-signer.keyvault-name = \"MyKeyVault\" tenant-id \u00b6 The tenant ID of the Azure Portal instance being used. Syntax --tenant-id = <STRING> Example --tenant-id = 34255fb0-379b-4a1a-bd47-d211ab86df81 Environment variable ETHSIGNER_AZURE_SIGNER_TENANT_ID = 34255fb0-379b-4a1a-bd47-d211ab86df81 Configuration file azure-signer.tenant-id = \"34255fb0-379b-4a1a-bd47-d211ab86df81\" multikey-signer \u00b6 directory \u00b6 Path to the directory containing the TOML files required to access keys. Syntax --directory = <directoryPath> Example --directory = /Users/me/keys Environment variable ETHSIGNER_MULTIKEY_SIGNER_DIRECTORY = /Users/me/keys Configuration file multikey-signer.directory = \"/Users/me/keys\"","title":"Subcommands"},{"location":"Reference/CLI/CLI-Subcommands/#subcommands","text":"EthSigner signs transaction with a key stored in an encrypted file or an external vault. The EthSigner subcommands are used to specify the keys used to sign transactions: ethsigner [Options] file-based-signer [File Options] ethsigner [Options] hashicorp-signer [Hashicorp Options] ethsigner [Options] azure-signer [Azure Options] ethsigner [Options] multikey-signer [Multikey Options] The file-based-signer , hashicorp-signer , and azure-signer subcommands are used for single keys only , and the multikey-signer subcommand is used for one or more keys . Important Only one signing key subcommand can be used.","title":"Subcommands"},{"location":"Reference/CLI/CLI-Subcommands/#specifying-subcommand-options","text":"The subcommand to use must be specified on the command line, but the subcommand options can be specified: On the command line As environment variables In a TOML configuration file. For example, you can set the options for the azure-signer subcommand in environment variables or a configuration file, but the subcommand must be specified in the command line Example ethsigner --config-file = ./config.toml azure-signer If you specify an option in more than one place, the order of priority is command line, environment variable, configuration file.","title":"Specifying subcommand options"},{"location":"Reference/CLI/CLI-Subcommands/#environment-variables","text":"For each subcommand option, the equivalent environment variable is: Upper-case _ replaces - Has an ETHSIGNER_ + <SIGNING_OPTION>_ prefix. For example set azure-signer --client-id using the ETHSIGNER_AZURE_SIGNER_CLIENT_ID environment variable. Note Only subcommand options can be set in environment variables. The actual subcommand must be specified in the command line.","title":"Environment variables"},{"location":"Reference/CLI/CLI-Subcommands/#view-help","text":"To view the command line help for the subcommands: ethsigner help file-based-signer ethsigner help hashicorp-signer ethsigner help azure-signer ethsigner help multikey-signer","title":"View help"},{"location":"Reference/CLI/CLI-Subcommands/#options","text":"","title":"Options"},{"location":"Reference/CLI/CLI-Subcommands/#file-based-signer","text":"","title":"file-based-signer"},{"location":"Reference/CLI/CLI-Subcommands/#key-file","text":"File containing key with which transactions are signed . Syntax -k, --key-file = <keyFile> Example --key-file = /Users/me/my_node/transactionKey Environment variable ETHSIGNER_FILE_BASED_SIGNER_KEY_FILE = /Users/me/my_node/transactionKey Configuration file file-based-signer.key-file = \"/Users/me/my_node/transactionKey\"","title":"key-file"},{"location":"Reference/CLI/CLI-Subcommands/#password-file","text":"File containing password for the key with which transactions are signed . Syntax -p, --password-file = <passwordFile> Example --password-file = /Users/me/my_node/password Environment variable ETHSIGNER_FILE_BASED_SIGNER_PASSWORD_FILE = /Users/me/my_node/password Configuration file file-based-signer.password-file = \"/Users/me/my_node/password\"","title":"password-file"},{"location":"Reference/CLI/CLI-Subcommands/#hashicorp-signer","text":"","title":"hashicorp-signer"},{"location":"Reference/CLI/CLI-Subcommands/#auth-file","text":"File containing authentication data for HashiCorp Vault. The authentication data is the root token displayed by the HashiCorp Vault server . Syntax --auth-file = <authFile> Example --auth-file = /Users/me/my_node/auth_file Environment variable ETHSIGNER_HASHICORP_SIGNER_AUTH_FILE = /Users/me/my_node/auth_file Configuration file hashicorp-signer.auth-file = \"/Users/me/my_node/auth_file\"","title":"auth-file"},{"location":"Reference/CLI/CLI-Subcommands/#host","text":"Host of the HashiCorp Vault server. Default is localhost . Syntax --host = <serverHost> Example --host = \"10.0.0.3\" Environment variable ETHSIGNER_HASHICORP_SIGNER_HOST = 10 .0.0.3 Configuration file hashicorp-signer.host = \"10.0.0.3\"","title":"host"},{"location":"Reference/CLI/CLI-Subcommands/#port","text":"Port of the HashiCorp Vault server. Default is 8200. Syntax --port = <serverPort> Example --port = 23000 Environment variable ETHSIGNER_HASHICORP_SIGNER_PORT = 23000 Configuration file hashicorp-signer.port = 23000","title":"port"},{"location":"Reference/CLI/CLI-Subcommands/#signing-key-path","text":"Path to secret in the HashiCorp Vault containing the private key for signing transactions. Default is /secret/data/ethsignerSigningKey . Syntax --signing-key-path = <signingKeyPath> Example --signing-key-path = /my_secret/ethsignerSigningKey Environment variable ETHSIGNER_HASHICORP_SIGNER_SIGNING_KEY_PATH = /my_secret/ethsignerSigningKey Configuration file hashicorp-signer.signing-key-path = \"/my_secret/ethsignerSigningKey\"","title":"signing-key-path"},{"location":"Reference/CLI/CLI-Subcommands/#timeout","text":"Timeout in milliseconds for requests to the HashiCorp Vault server. Default is 10000. Syntax --timeout = <timeout> Example --timeout = 5000 Environment variable ETHSIGNER_HASHICORP_SIGNER_TIMEOUT = 5000 Configuration file hashicorp-signer.timeout = 5000","title":"timeout"},{"location":"Reference/CLI/CLI-Subcommands/#tls-enabled","text":"Connect to HashiCorp Vault server using TLS. Default is true . Syntax --tls-enabled [= <true | false> ] Example --tls-enabled = false Environment variable ETHSIGNER_HASHICORP_SIGNER_TLS_ENABLED = false Configuration file hashicorp-signer.tls-enabled = false","title":"tls-enabled"},{"location":"Reference/CLI/CLI-Subcommands/#tls-known-server-file","text":"File containing the hostname, port, and SHA256 certificate fingerprint of the HashiCorp Vault server. Syntax --tls-known-server-file = <hashicorpServerFile> Example --tls-known-server-file = /Users/me/my_node/knownHashicorpServers Environment variable ETHSIGNER_HASHICORP_SIGNER_TLS_KNOWN_SERVER_FILE = /Users/me/my_node/knownHashicorpServers Configuration file hashicorp-signer.tls-known-server-file = \"/Users/me/my_node/knownHashicorpServers\"","title":"tls-known-server-file"},{"location":"Reference/CLI/CLI-Subcommands/#azure-signer","text":"","title":"azure-signer"},{"location":"Reference/CLI/CLI-Subcommands/#client-id","text":"ID used to authenticate with Azure Key Vault. Syntax --client-id = <clientID> Example --client-id = \"MyClientID\" Environment variable ETHSIGNER_AZURE_SIGNER_CLIENT_ID = MyClientID Configuration file azure-signer.client-id = \"MyClientID\"","title":"client-id"},{"location":"Reference/CLI/CLI-Subcommands/#client-secret-path","text":"Path to file containing secret used to access the vault. Syntax --client-secret-path = <clientSecretPath> Example --client-secret-path = /Path/MySecret Environment variable ETHSIGNER_AZURE_SIGNER_CLIENT_SECRET_PATH = \"/Path/MySecret\" Configuration file azure-signer.client-secret-path = /Path/MySecret","title":"client-secret-path"},{"location":"Reference/CLI/CLI-Subcommands/#key-name","text":"Name of key to be used. Syntax --key-name = <keyName> Example --key-name = \"MyKey\" Environment variable ETHSIGNER_AZURE_SIGNER_KEY_NAME = MyKey Configuration file azure-signer.key-name = \"MyKey\"","title":"key-name"},{"location":"Reference/CLI/CLI-Subcommands/#key-version","text":"Version of the specified key to use. Syntax --key-version = <keyVersion> Example --key-version = \"7c01fe58d68148bba5824ce418241092\" Environment variable ETHSIGNER_AZURE_SIGNER_KEY_VERSION = 7c01fe58d68148bba5824ce418241092 Configuration file azure-signer.key-version = \"7c01fe58d68148bba5824ce418241092\"","title":"key-version"},{"location":"Reference/CLI/CLI-Subcommands/#keyvault-name-key-vault-name","text":"Name of the vault to access. Sub-domain of vault.azure.net . Syntax --keyvault-name = <keyVaultName> Example --keyvault-name = \"MyKeyVault\" Environment variable ETHSIGNER_AZURE_SIGNER_KEY_VAULT_NAME = MyKeyVault Configuration file azure-signer.keyvault-name = \"MyKeyVault\"","title":"keyvault-name, key-vault-name"},{"location":"Reference/CLI/CLI-Subcommands/#tenant-id","text":"The tenant ID of the Azure Portal instance being used. Syntax --tenant-id = <STRING> Example --tenant-id = 34255fb0-379b-4a1a-bd47-d211ab86df81 Environment variable ETHSIGNER_AZURE_SIGNER_TENANT_ID = 34255fb0-379b-4a1a-bd47-d211ab86df81 Configuration file azure-signer.tenant-id = \"34255fb0-379b-4a1a-bd47-d211ab86df81\"","title":"tenant-id"},{"location":"Reference/CLI/CLI-Subcommands/#multikey-signer","text":"","title":"multikey-signer"},{"location":"Reference/CLI/CLI-Subcommands/#directory","text":"Path to the directory containing the TOML files required to access keys. Syntax --directory = <directoryPath> Example --directory = /Users/me/keys Environment variable ETHSIGNER_MULTIKEY_SIGNER_DIRECTORY = /Users/me/keys Configuration file multikey-signer.directory = \"/Users/me/keys\"","title":"directory"},{"location":"Reference/CLI/CLI-Syntax/","text":"EthSigner command line \u00b6 This reference describes the syntax of the EthSigner Command Line Interface (CLI) options. Specifying options \u00b6 EthSigner options can be specified: On the command line As an environment variable In a TOML configuration file . If you specify an option in more than one place, the order of priority is command line, environment variable, configuration file. Environment variables \u00b6 For each command line option, the equivalent environment variable is: Upper-case _ replaces - Has an ETHSIGNER_ prefix For example, set --data-path using the ETHSIGNER_DATA_PATH environment variable. You can include subcommand options as environment variables as well, for example set multikey-signer --directory using the ETHSIGNER_MULTIKEY_SIGNER_DIRECTORY environment variable. Options \u00b6 config-file \u00b6 The path to the TOML configuration file . The default is none . Syntax --config-file = <FILE> Example --config-file = /home/me/me_node/config.toml Environment variable ETHSIGNER_CONFIG_FILE = /home/me/me_node/config.toml chain-id \u00b6 Chain ID of the network to receive the signed transactions. Syntax --chain-id = <chainId> Example --chain-id = 2017 Environment variable ETHSIGNER_CHAIN_ID = 2017 Configuration file chain-id = 2017 data-path \u00b6 Directory in which to store temporary files. Syntax --data-path = <PATH> Example --data-path = /Users/me/my_node/data Environment variable ETHSIGNER_DATA_PATH = /Users/me/my_node/data Configuration file data-path = \"/Users/me/my_node/data\" downstream-http-host \u00b6 Host to which received requests are forwarded. Default is localhost . Syntax --downstream-http-host = <downstreamHttpHost> Example --downstream-http-host = 192 .168.05.14 Environment variable ETHSIGNER_DOWNSTREAM_HTTP_HOST = 192 .168.05.14 Configuration file downstream-http-host = \"192.168.05.14\" downstream-http-path \u00b6 Path to which received requests are forwarded. Default is / . Might be required if connecting to a cloud-based Ethereum client such as Infura . Syntax --downstream-http-path = <downstreamHttpPath> Example --downstream-http-path = /v3/d0e63ca5bb1e4eef2284422efbc51a56 Environment variable ETHSIGNER_DOWNSTREAM_HTTP_PATH = /v3/d0e63ca5bb1e4eef2284422efbc51a56 Configuration file downstream-http-path = \"/v3/d0e63ca5bb1e4eef2284422efbc51a56\" downstream-http-port \u00b6 Port to which received requests are forwarded. Syntax --downstream-http-port = <downstreamHttpPort> Example --downstream-http-port = 6174 Environment variable ETHSIGNER_DOWNSTREAM_HTTP_PORT = 6174 Configuration file downstream-http-port = 6174 downstream-http-request-timeout \u00b6 Timeout period (in milliseconds) for downstream requests. Default is 5000. Syntax --downstream-http-request-timeout = <downstreamHttpRequestTimeout> Example --downstream-http-request-timeout = 3000 Environment variable ETHSIGNER_DOWNSTREAM_HTTP_REQUEST_TIMEOUT = 3000 Configuration file downstream-http-request-timeout = 3000 downstream-http-tls-enabled \u00b6 Enable or disable TLS for server connections . Defaults to false . Syntax --downstream-http-tls-enabled [= <true | false> ] Example --downstream-http-tls-enabled Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_ENABLED Configuration file downstream-http-tls-enabled downstream-http-tls-ca-auth-enabled \u00b6 Allow connections to servers with trusted CAs. Defaults to true . Syntax --downstream-http-tls-ca-auth-enabled [= <true | false> ] Example --downstream-http-tls-ca-auth-enabled = false Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_CA_AUTH_ENABLED = false Configuration file downstream-http-tls-ca-auth-enabled = false downstream-http-tls-keystore-file \u00b6 Keystore file (in PKCS #12 format) that contains the private key and certificate presented to the server during authentication. Syntax --downstream-http-tls-keystore-file = <keystoreFile> Example --downstream-http-tls-keystore-file = /Users/me/my_node/keystore.pfx Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_KEYSTORE_FILE = /Users/me/my_node/keystore.pfx Configuration file downstream-http-tls-keystore-file = \"/Users/me/my_node/keystore.pfx\" downstream-http-tls-keystore-password-file \u00b6 Password file used to decrypt the keystore. Syntax --downstream-http-tls-keystore-password-file = <passwordFile> Example --downstream-http-tls-keystore-password-file = /Users/me/my_node/password.txt Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_KEYSTORE_PASSWORD_FILE = /Users/me/my_node/password.txt Configuration file downstream-http-tls-keystore-password-file = /Users/me/my_node/password.txt downstream-http-tls-known-servers-file \u00b6 File containing the hostnames, ports, and SHA256 certificate fingerprints of trusted servers . Syntax --downstream-http-tls-known-servers-file = <serversFile> Example --downstream-http-tls-known-servers-file = /Users/me/my_node/knownServers Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_KNOWN_SERVERS_FILE = /Users/me/my_node/knownServers Configuration file downstream-http-tls-known-servers-file = \"/Users/me/my_node/knownServers\" http-cors-origins \u00b6 A list of domain URLs for CORS validation. You must enclose the URLs in double quotes and separate them with commas. Listed domains can access the node using JSON-RPC. If your client interacts with EthSigner using a browser app (such as Remix or a block explorer), you must allow the client domains. The default value is none . If you do not allow any domains, browser apps cannot interact with your EthSigner node. Tip For testing and development purposes, use \"all\" or \"*\" to accept requests from any domain. We don\u2019t recommend accepting requests from any domain for production environments. Syntax --http-cors-origins = <httpListenHost> Example --http-cors-origins = \"http://remix.ethereum.org\" , \"http://medomain.com\" Environment variable ETHSIGNER_HTTP_CORS_ORIGINS = \"http://remix.ethereum.org\" , \"http://medomain.com\" Configuration file http-cors-origins =[ \"http://remix.ethereum.org\" , \"https://meotherdomain.com\" ] http-listen-host \u00b6 Host on which JSON-RPC HTTP listens. Default is localhost . Syntax --http-listen-host = <httpListenHost> Example --http-listen-host = 10 .100.111.1 Environment variable ETHSIGNER_HTTP_LISTEN_HOST = 10 .100.111.1 Configuration file http-listen-host = \"10.100.111.1\" http-listen-port \u00b6 Port on which JSON-RPC HTTP listens. Default is 8545. Syntax --http-listen-port = <httpListenPort> Example --http-listen-port = 6174 Environment variable ETHSIGNER_HTTP_LISTEN_PORT = 6174 Configuration file http-listen-port = 6174 logging \u00b6 Logging verbosity levels. Options are: OFF , FATAL , WARN , INFO , DEBUG , TRACE , ALL . Default is INFO . Syntax -l, --logging = <LOG VERBOSITY LEVEL> Example --logging = DEBUG Environment variable ETHSIGNER_LOGGING = DEBUG Configuration file logging = \"DEBUG\" metrics-enabled \u00b6 Enables the metrics exporter . The default is false . Syntax --metrics-enabled [= <true | false> ] Environment variable ETHSIGNER_METRICS_ENABLED = true Configuration file metrics-enabled = true metrics-category \u00b6 Categories for which to track metrics. Options are HTTP , SIGNING , JVM , and PROCESS . All categories are enabled by default. Note There are currently no metrics available for the HTTP and SIGNING categories. Syntax --metrics-category = <metrics-category> [ ,metrics-category... ] ... Example --metrics-category = HTTP,SIGNING Environment variable ETHSIGNER_METRICS_CATEGORY = HTTP,SIGNING Configuration file metrics-category =[ \"HTTP\" , \"SIGNING\" ] metrics-host \u00b6 The host on which Prometheus accesses EthSigner metrics. The default is 127.0.0.1 . Syntax --metrics-host = <HOST> Example --metrics-host = 127 .0.0.1 Environment variable ETHSIGNER_METRICS_HOST = 127 .0.0.1 Configuration file metrics-host = \"127.0.0.1\" metrics-host-allowlist \u00b6 A comma-separated list of hostnames to allow access to the EthSigner metrics. By default, EthSigner accepts access from localhost and 127.0.0.1 . Tip To allow all hostnames, use \u201c*\u201d. We don\u2019t recommend allowing all hostnames for production environments. Syntax --metrics-host-allowlist = <hostname> [ ,<hostname>... ] ... or \"*\" Example --metrics-host-allowlist = medomain.com,meotherdomain.com Environment variable ETHSIGNER_METRICS_HOST_ALLOWLIST = medomain.com,meotherdomain.com Configuration file metrics-host-allowlist =[ \"medomain.com\" , \"meotherdomain.com\" ] metrics-port \u00b6 The port (TCP) on which Prometheus accesses EthSigner metrics. The default is 9546 . Syntax --metrics-port = <PORT> Example --metrics-port = 6174 Environment variable ETHSIGNER_METRICS_PORT = 6174 Configuration file metrics-port = 6174 tls-allow-any-client \u00b6 Allows any client to connect. Important Cannot be used with --tls-allow-ca-clients and --tls-known-clients-file Syntax --tls-allow-any-client Environment variable ETHSIGNER_TLS_ALLOW_ANY_CLIENT Configuration file tls-allow-any-client tls-allow-ca-clients \u00b6 Allows clients signed with trusted CA certificates to connect. Syntax --tls-allow-ca-clients Environment variable ETHSIGNER_TLS_ALLOW_CA_CLIENTS Configuration file tls-allow-ca-clients tls-keystore-file \u00b6 PKCS #12 formatted keystore. Used to enable TLS for client connections . Syntax --tls-keystore-file = <keystoreFile> Example --tls-keystore-file = /Users/me/my_node/certificate.pfx Environment variable ETHSIGNER_TLS_KEYSTORE_FILE = /Users/me/my_node/certificate.pfx Configuration file tls-keystore-file = \"/Users/me/my_node/certificate.pfx\" tls-keystore-password-file \u00b6 Password file used to decrypt the keystore. Syntax --tls-keystore-password-file = <passwordFile> Example --tls-keystore-password-file = /Users/me/my_node/password.txt Environment variable ETHSIGNER_TLS_KEYSTORE_PASSWORD_FILE = /Users/me/my_node/password.txt Configuration file tls-keystore-password-file = /Users/me/my_node/password.txt tls-known-clients-file \u00b6 File containing the SHA-256 fingerprints of authorized clients . Syntax --tls-known-clients-file = <clientsFile> Example --tls-known-clients-file = /Users/me/my_node/knownClients Environment variable ETHSIGNER_TLS_KNOWN_CLIENTS_FILE = /Users/me/my_node/knownClients Configuration file tls-known-clients-file = \"/Users/me/my_node/knownClients\" help \u00b6 Displays the help and exits. Syntax -h, --help version \u00b6 Displays the version and exits. Syntax -V, --version","title":"Options"},{"location":"Reference/CLI/CLI-Syntax/#ethsigner-command-line","text":"This reference describes the syntax of the EthSigner Command Line Interface (CLI) options.","title":"EthSigner command line"},{"location":"Reference/CLI/CLI-Syntax/#specifying-options","text":"EthSigner options can be specified: On the command line As an environment variable In a TOML configuration file . If you specify an option in more than one place, the order of priority is command line, environment variable, configuration file.","title":"Specifying options"},{"location":"Reference/CLI/CLI-Syntax/#environment-variables","text":"For each command line option, the equivalent environment variable is: Upper-case _ replaces - Has an ETHSIGNER_ prefix For example, set --data-path using the ETHSIGNER_DATA_PATH environment variable. You can include subcommand options as environment variables as well, for example set multikey-signer --directory using the ETHSIGNER_MULTIKEY_SIGNER_DIRECTORY environment variable.","title":"Environment variables"},{"location":"Reference/CLI/CLI-Syntax/#options","text":"","title":"Options"},{"location":"Reference/CLI/CLI-Syntax/#config-file","text":"The path to the TOML configuration file . The default is none . Syntax --config-file = <FILE> Example --config-file = /home/me/me_node/config.toml Environment variable ETHSIGNER_CONFIG_FILE = /home/me/me_node/config.toml","title":"config-file"},{"location":"Reference/CLI/CLI-Syntax/#chain-id","text":"Chain ID of the network to receive the signed transactions. Syntax --chain-id = <chainId> Example --chain-id = 2017 Environment variable ETHSIGNER_CHAIN_ID = 2017 Configuration file chain-id = 2017","title":"chain-id"},{"location":"Reference/CLI/CLI-Syntax/#data-path","text":"Directory in which to store temporary files. Syntax --data-path = <PATH> Example --data-path = /Users/me/my_node/data Environment variable ETHSIGNER_DATA_PATH = /Users/me/my_node/data Configuration file data-path = \"/Users/me/my_node/data\"","title":"data-path"},{"location":"Reference/CLI/CLI-Syntax/#downstream-http-host","text":"Host to which received requests are forwarded. Default is localhost . Syntax --downstream-http-host = <downstreamHttpHost> Example --downstream-http-host = 192 .168.05.14 Environment variable ETHSIGNER_DOWNSTREAM_HTTP_HOST = 192 .168.05.14 Configuration file downstream-http-host = \"192.168.05.14\"","title":"downstream-http-host"},{"location":"Reference/CLI/CLI-Syntax/#downstream-http-path","text":"Path to which received requests are forwarded. Default is / . Might be required if connecting to a cloud-based Ethereum client such as Infura . Syntax --downstream-http-path = <downstreamHttpPath> Example --downstream-http-path = /v3/d0e63ca5bb1e4eef2284422efbc51a56 Environment variable ETHSIGNER_DOWNSTREAM_HTTP_PATH = /v3/d0e63ca5bb1e4eef2284422efbc51a56 Configuration file downstream-http-path = \"/v3/d0e63ca5bb1e4eef2284422efbc51a56\"","title":"downstream-http-path"},{"location":"Reference/CLI/CLI-Syntax/#downstream-http-port","text":"Port to which received requests are forwarded. Syntax --downstream-http-port = <downstreamHttpPort> Example --downstream-http-port = 6174 Environment variable ETHSIGNER_DOWNSTREAM_HTTP_PORT = 6174 Configuration file downstream-http-port = 6174","title":"downstream-http-port"},{"location":"Reference/CLI/CLI-Syntax/#downstream-http-request-timeout","text":"Timeout period (in milliseconds) for downstream requests. Default is 5000. Syntax --downstream-http-request-timeout = <downstreamHttpRequestTimeout> Example --downstream-http-request-timeout = 3000 Environment variable ETHSIGNER_DOWNSTREAM_HTTP_REQUEST_TIMEOUT = 3000 Configuration file downstream-http-request-timeout = 3000","title":"downstream-http-request-timeout"},{"location":"Reference/CLI/CLI-Syntax/#downstream-http-tls-enabled","text":"Enable or disable TLS for server connections . Defaults to false . Syntax --downstream-http-tls-enabled [= <true | false> ] Example --downstream-http-tls-enabled Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_ENABLED Configuration file downstream-http-tls-enabled","title":"downstream-http-tls-enabled"},{"location":"Reference/CLI/CLI-Syntax/#downstream-http-tls-ca-auth-enabled","text":"Allow connections to servers with trusted CAs. Defaults to true . Syntax --downstream-http-tls-ca-auth-enabled [= <true | false> ] Example --downstream-http-tls-ca-auth-enabled = false Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_CA_AUTH_ENABLED = false Configuration file downstream-http-tls-ca-auth-enabled = false","title":"downstream-http-tls-ca-auth-enabled"},{"location":"Reference/CLI/CLI-Syntax/#downstream-http-tls-keystore-file","text":"Keystore file (in PKCS #12 format) that contains the private key and certificate presented to the server during authentication. Syntax --downstream-http-tls-keystore-file = <keystoreFile> Example --downstream-http-tls-keystore-file = /Users/me/my_node/keystore.pfx Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_KEYSTORE_FILE = /Users/me/my_node/keystore.pfx Configuration file downstream-http-tls-keystore-file = \"/Users/me/my_node/keystore.pfx\"","title":"downstream-http-tls-keystore-file"},{"location":"Reference/CLI/CLI-Syntax/#downstream-http-tls-keystore-password-file","text":"Password file used to decrypt the keystore. Syntax --downstream-http-tls-keystore-password-file = <passwordFile> Example --downstream-http-tls-keystore-password-file = /Users/me/my_node/password.txt Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_KEYSTORE_PASSWORD_FILE = /Users/me/my_node/password.txt Configuration file downstream-http-tls-keystore-password-file = /Users/me/my_node/password.txt","title":"downstream-http-tls-keystore-password-file"},{"location":"Reference/CLI/CLI-Syntax/#downstream-http-tls-known-servers-file","text":"File containing the hostnames, ports, and SHA256 certificate fingerprints of trusted servers . Syntax --downstream-http-tls-known-servers-file = <serversFile> Example --downstream-http-tls-known-servers-file = /Users/me/my_node/knownServers Environment variable ETHSIGNER_DOWNSTREAM_HTTP_TLS_KNOWN_SERVERS_FILE = /Users/me/my_node/knownServers Configuration file downstream-http-tls-known-servers-file = \"/Users/me/my_node/knownServers\"","title":"downstream-http-tls-known-servers-file"},{"location":"Reference/CLI/CLI-Syntax/#http-cors-origins","text":"A list of domain URLs for CORS validation. You must enclose the URLs in double quotes and separate them with commas. Listed domains can access the node using JSON-RPC. If your client interacts with EthSigner using a browser app (such as Remix or a block explorer), you must allow the client domains. The default value is none . If you do not allow any domains, browser apps cannot interact with your EthSigner node. Tip For testing and development purposes, use \"all\" or \"*\" to accept requests from any domain. We don\u2019t recommend accepting requests from any domain for production environments. Syntax --http-cors-origins = <httpListenHost> Example --http-cors-origins = \"http://remix.ethereum.org\" , \"http://medomain.com\" Environment variable ETHSIGNER_HTTP_CORS_ORIGINS = \"http://remix.ethereum.org\" , \"http://medomain.com\" Configuration file http-cors-origins =[ \"http://remix.ethereum.org\" , \"https://meotherdomain.com\" ]","title":"http-cors-origins"},{"location":"Reference/CLI/CLI-Syntax/#http-listen-host","text":"Host on which JSON-RPC HTTP listens. Default is localhost . Syntax --http-listen-host = <httpListenHost> Example --http-listen-host = 10 .100.111.1 Environment variable ETHSIGNER_HTTP_LISTEN_HOST = 10 .100.111.1 Configuration file http-listen-host = \"10.100.111.1\"","title":"http-listen-host"},{"location":"Reference/CLI/CLI-Syntax/#http-listen-port","text":"Port on which JSON-RPC HTTP listens. Default is 8545. Syntax --http-listen-port = <httpListenPort> Example --http-listen-port = 6174 Environment variable ETHSIGNER_HTTP_LISTEN_PORT = 6174 Configuration file http-listen-port = 6174","title":"http-listen-port"},{"location":"Reference/CLI/CLI-Syntax/#logging","text":"Logging verbosity levels. Options are: OFF , FATAL , WARN , INFO , DEBUG , TRACE , ALL . Default is INFO . Syntax -l, --logging = <LOG VERBOSITY LEVEL> Example --logging = DEBUG Environment variable ETHSIGNER_LOGGING = DEBUG Configuration file logging = \"DEBUG\"","title":"logging"},{"location":"Reference/CLI/CLI-Syntax/#metrics-enabled","text":"Enables the metrics exporter . The default is false . Syntax --metrics-enabled [= <true | false> ] Environment variable ETHSIGNER_METRICS_ENABLED = true Configuration file metrics-enabled = true","title":"metrics-enabled"},{"location":"Reference/CLI/CLI-Syntax/#metrics-category","text":"Categories for which to track metrics. Options are HTTP , SIGNING , JVM , and PROCESS . All categories are enabled by default. Note There are currently no metrics available for the HTTP and SIGNING categories. Syntax --metrics-category = <metrics-category> [ ,metrics-category... ] ... Example --metrics-category = HTTP,SIGNING Environment variable ETHSIGNER_METRICS_CATEGORY = HTTP,SIGNING Configuration file metrics-category =[ \"HTTP\" , \"SIGNING\" ]","title":"metrics-category"},{"location":"Reference/CLI/CLI-Syntax/#metrics-host","text":"The host on which Prometheus accesses EthSigner metrics. The default is 127.0.0.1 . Syntax --metrics-host = <HOST> Example --metrics-host = 127 .0.0.1 Environment variable ETHSIGNER_METRICS_HOST = 127 .0.0.1 Configuration file metrics-host = \"127.0.0.1\"","title":"metrics-host"},{"location":"Reference/CLI/CLI-Syntax/#metrics-host-allowlist","text":"A comma-separated list of hostnames to allow access to the EthSigner metrics. By default, EthSigner accepts access from localhost and 127.0.0.1 . Tip To allow all hostnames, use \u201c*\u201d. We don\u2019t recommend allowing all hostnames for production environments. Syntax --metrics-host-allowlist = <hostname> [ ,<hostname>... ] ... or \"*\" Example --metrics-host-allowlist = medomain.com,meotherdomain.com Environment variable ETHSIGNER_METRICS_HOST_ALLOWLIST = medomain.com,meotherdomain.com Configuration file metrics-host-allowlist =[ \"medomain.com\" , \"meotherdomain.com\" ]","title":"metrics-host-allowlist"},{"location":"Reference/CLI/CLI-Syntax/#metrics-port","text":"The port (TCP) on which Prometheus accesses EthSigner metrics. The default is 9546 . Syntax --metrics-port = <PORT> Example --metrics-port = 6174 Environment variable ETHSIGNER_METRICS_PORT = 6174 Configuration file metrics-port = 6174","title":"metrics-port"},{"location":"Reference/CLI/CLI-Syntax/#tls-allow-any-client","text":"Allows any client to connect. Important Cannot be used with --tls-allow-ca-clients and --tls-known-clients-file Syntax --tls-allow-any-client Environment variable ETHSIGNER_TLS_ALLOW_ANY_CLIENT Configuration file tls-allow-any-client","title":"tls-allow-any-client"},{"location":"Reference/CLI/CLI-Syntax/#tls-allow-ca-clients","text":"Allows clients signed with trusted CA certificates to connect. Syntax --tls-allow-ca-clients Environment variable ETHSIGNER_TLS_ALLOW_CA_CLIENTS Configuration file tls-allow-ca-clients","title":"tls-allow-ca-clients"},{"location":"Reference/CLI/CLI-Syntax/#tls-keystore-file","text":"PKCS #12 formatted keystore. Used to enable TLS for client connections . Syntax --tls-keystore-file = <keystoreFile> Example --tls-keystore-file = /Users/me/my_node/certificate.pfx Environment variable ETHSIGNER_TLS_KEYSTORE_FILE = /Users/me/my_node/certificate.pfx Configuration file tls-keystore-file = \"/Users/me/my_node/certificate.pfx\"","title":"tls-keystore-file"},{"location":"Reference/CLI/CLI-Syntax/#tls-keystore-password-file","text":"Password file used to decrypt the keystore. Syntax --tls-keystore-password-file = <passwordFile> Example --tls-keystore-password-file = /Users/me/my_node/password.txt Environment variable ETHSIGNER_TLS_KEYSTORE_PASSWORD_FILE = /Users/me/my_node/password.txt Configuration file tls-keystore-password-file = /Users/me/my_node/password.txt","title":"tls-keystore-password-file"},{"location":"Reference/CLI/CLI-Syntax/#tls-known-clients-file","text":"File containing the SHA-256 fingerprints of authorized clients . Syntax --tls-known-clients-file = <clientsFile> Example --tls-known-clients-file = /Users/me/my_node/knownClients Environment variable ETHSIGNER_TLS_KNOWN_CLIENTS_FILE = /Users/me/my_node/knownClients Configuration file tls-known-clients-file = \"/Users/me/my_node/knownClients\"","title":"tls-known-clients-file"},{"location":"Reference/CLI/CLI-Syntax/#help","text":"Displays the help and exits. Syntax -h, --help","title":"help"},{"location":"Reference/CLI/CLI-Syntax/#version","text":"Displays the version and exits. Syntax -V, --version","title":"version"},{"location":"Tutorials/Multifile/","text":"Start EthSigner with multiple signing keys \u00b6 EthSigner supports transaction signing using multiple keys . This tutorial covers configuring multiple keys using V3 keystore files. To configure keys for HashiCorp Vault or Azure Key Vault , update the TOML configuration file accordingly. Note Multiple signing keys is not the same as multi-tenancy. EthSigner does not support multi-tenancy. Multi-tenancy is a feature in Hyperledger Besu and Tessera allowing multiple participants in a privacy network to use the same Besu and Tessera node. Prerequisites \u00b6 EthSigner Hyperledger Besu Node.js web3.js . Note The Ethereum client used in this documentation is Hyperledger Besu but EthSigner can be used with any Ethereum client. Start Besu \u00b6 Start Besu with the --rpc-http-port option set to 8590 . Example besu --network = dev --miner-enabled --miner-coinbase = 0xfe3b557e8fb62b89f4916b721be55ceb828dbd73 --rpc-http-cors-origins = \"all\" --host-allowlist = * --rpc-http-enabled --rpc-http-port = 8590 --data-path = /Users/me/Datadir Create password and key files \u00b6 You can create one or more password and V3 Keystore key files. Create a text file containing the password for the V3 Keystore key file to be created (for example, passwordFile ). Use the web3.js library to create a key file where: <AccountPrivateKey> is the account private key EthSigner uses to sign transactions. <Password> is the key file password being created. The password must match the password saved in the password file created previously ( passwordFile in this example). Example Create key file 1 2 3 4 5 6 7 8 const Web3 = require ( 'web3' ) // Web3 initialization (should point to the JSON-RPC endpoint) const web3 = new Web3 ( new Web3 . providers . HttpProvider ( 'http://127.0.0.1:8590' )) var V3KeyStore = web3 . eth . accounts . encrypt ( \"<AccountPrivateKey>\" , \"<Password>\" ); console . log ( JSON . stringify ( V3KeyStore )); process . exit (); Example 1 2 3 4 5 6 7 8 const Web3 = require ( 'web3' ) // Web3 initialization (should point to the JSON-RPC endpoint) const web3 = new Web3 ( new Web3 . providers . HttpProvider ( 'http://127.0.0.1:8590' )) var V3KeyStore = web3 . eth . accounts . encrypt ( \"0x8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\" , \"password\" ); console . log ( JSON . stringify ( V3KeyStore )); process . exit (); Copy and paste the example JS script to a file (for example, createKeyFile.js ) and replace the placeholders. Use the JS script to display the text for the key file: node createKeyFile.js Copy and paste the text to a file (for example, keyFile ). The file is your V3 Keystore key file. Each key file requires a TOML file. Create the TOML file \u00b6 Create the TOML file that contains the settings to access the key file. Each key that signs transactions requires a TOML file. The file name must use the format [<prefix>]<accountAddress>.toml . Remove the 0x portion of the account address. For example, 78e6e236592597c09d5c137c2af40aecd42d12a2.toml . Example [metadata] createdAt = 2019-11-05T08:15:30-05:00 description = \"File based configuration\" [signing] type = \"file-based-signer\" key-file = \"/Users/me/project/keyFile\" password-file = \"/Users/me/project/passwordFile\" Start EthSigner \u00b6 Start EthSigner with options: chain-id is the chain ID specified in the Besu genesis file . downstream-http-port is the rpc-http-port specified for Besu ( 8590 in this example). directory is the location of TOML file created above . Example ethsigner --chain-id=2018 --downstream-http-port=8590 multikey-signer --directory=/Users/me/project If using a cloud-based Ethereum client such as Infura , specify the endpoint using the --downstream-http-host and --downstream-http-path command line options. Example ethsigner --chain-id=5 --downstream-http-host=goerli.infura.io \\ --downstream-http-path=/v3/d0e63ca5bb1e4eef2284422efbc51a56 --downstream-http-port=443 \\ --downstream-http-tls-enabled multikey-signer --directory=/Users/me/project Confirm EthSigner is running \u00b6 Use the upcheck endpoint to confirm EthSigner is running. Example curl HTTP request curl -X GET http://127.0.0.1:8545/upcheck Result I'm up Confirm EthSigner is passing requests to Besu \u00b6 Request the current block number using eth_blockNumber with the EthSigner JSON-RPC endpoint ( 8545 in this example): curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":51}' http://127.0.0.1:8545 You can now use EthSigner to sign transactions with the keys stored in the V3 Keystore key files.","title":"Start EthSigner with multiple signers"},{"location":"Tutorials/Multifile/#start-ethsigner-with-multiple-signing-keys","text":"EthSigner supports transaction signing using multiple keys . This tutorial covers configuring multiple keys using V3 keystore files. To configure keys for HashiCorp Vault or Azure Key Vault , update the TOML configuration file accordingly. Note Multiple signing keys is not the same as multi-tenancy. EthSigner does not support multi-tenancy. Multi-tenancy is a feature in Hyperledger Besu and Tessera allowing multiple participants in a privacy network to use the same Besu and Tessera node.","title":"Start EthSigner with multiple signing keys"},{"location":"Tutorials/Multifile/#prerequisites","text":"EthSigner Hyperledger Besu Node.js web3.js . Note The Ethereum client used in this documentation is Hyperledger Besu but EthSigner can be used with any Ethereum client.","title":"Prerequisites"},{"location":"Tutorials/Multifile/#start-besu","text":"Start Besu with the --rpc-http-port option set to 8590 . Example besu --network = dev --miner-enabled --miner-coinbase = 0xfe3b557e8fb62b89f4916b721be55ceb828dbd73 --rpc-http-cors-origins = \"all\" --host-allowlist = * --rpc-http-enabled --rpc-http-port = 8590 --data-path = /Users/me/Datadir","title":"Start Besu"},{"location":"Tutorials/Multifile/#create-password-and-key-files","text":"You can create one or more password and V3 Keystore key files. Create a text file containing the password for the V3 Keystore key file to be created (for example, passwordFile ). Use the web3.js library to create a key file where: <AccountPrivateKey> is the account private key EthSigner uses to sign transactions. <Password> is the key file password being created. The password must match the password saved in the password file created previously ( passwordFile in this example). Example Create key file 1 2 3 4 5 6 7 8 const Web3 = require ( 'web3' ) // Web3 initialization (should point to the JSON-RPC endpoint) const web3 = new Web3 ( new Web3 . providers . HttpProvider ( 'http://127.0.0.1:8590' )) var V3KeyStore = web3 . eth . accounts . encrypt ( \"<AccountPrivateKey>\" , \"<Password>\" ); console . log ( JSON . stringify ( V3KeyStore )); process . exit (); Example 1 2 3 4 5 6 7 8 const Web3 = require ( 'web3' ) // Web3 initialization (should point to the JSON-RPC endpoint) const web3 = new Web3 ( new Web3 . providers . HttpProvider ( 'http://127.0.0.1:8590' )) var V3KeyStore = web3 . eth . accounts . encrypt ( \"0x8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\" , \"password\" ); console . log ( JSON . stringify ( V3KeyStore )); process . exit (); Copy and paste the example JS script to a file (for example, createKeyFile.js ) and replace the placeholders. Use the JS script to display the text for the key file: node createKeyFile.js Copy and paste the text to a file (for example, keyFile ). The file is your V3 Keystore key file. Each key file requires a TOML file.","title":"Create password and key files"},{"location":"Tutorials/Multifile/#create-the-toml-file","text":"Create the TOML file that contains the settings to access the key file. Each key that signs transactions requires a TOML file. The file name must use the format [<prefix>]<accountAddress>.toml . Remove the 0x portion of the account address. For example, 78e6e236592597c09d5c137c2af40aecd42d12a2.toml . Example [metadata] createdAt = 2019-11-05T08:15:30-05:00 description = \"File based configuration\" [signing] type = \"file-based-signer\" key-file = \"/Users/me/project/keyFile\" password-file = \"/Users/me/project/passwordFile\"","title":"Create the TOML file"},{"location":"Tutorials/Multifile/#start-ethsigner","text":"Start EthSigner with options: chain-id is the chain ID specified in the Besu genesis file . downstream-http-port is the rpc-http-port specified for Besu ( 8590 in this example). directory is the location of TOML file created above . Example ethsigner --chain-id=2018 --downstream-http-port=8590 multikey-signer --directory=/Users/me/project If using a cloud-based Ethereum client such as Infura , specify the endpoint using the --downstream-http-host and --downstream-http-path command line options. Example ethsigner --chain-id=5 --downstream-http-host=goerli.infura.io \\ --downstream-http-path=/v3/d0e63ca5bb1e4eef2284422efbc51a56 --downstream-http-port=443 \\ --downstream-http-tls-enabled multikey-signer --directory=/Users/me/project","title":"Start EthSigner"},{"location":"Tutorials/Multifile/#confirm-ethsigner-is-running","text":"Use the upcheck endpoint to confirm EthSigner is running. Example curl HTTP request curl -X GET http://127.0.0.1:8545/upcheck Result I'm up","title":"Confirm EthSigner is running"},{"location":"Tutorials/Multifile/#confirm-ethsigner-is-passing-requests-to-besu","text":"Request the current block number using eth_blockNumber with the EthSigner JSON-RPC endpoint ( 8545 in this example): curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":51}' http://127.0.0.1:8545 You can now use EthSigner to sign transactions with the keys stored in the V3 Keystore key files.","title":"Confirm EthSigner is passing requests to Besu"},{"location":"Tutorials/Quorum-Dev-Quickstart/","text":"Quorum Developer Quickstart \u00b6 Prerequisites \u00b6 Docker and Docker-compose Nodejs On Windows: Windows Subsystem for Linux 2 Docker desktop configured to use the WSL2-based engine. Important Ensure you allow Docker up to 4G of memory or 6G if running the privacy examples. Refer to the Resources section in Docker for Mac and Docker Desktop for details. Usage \u00b6 To create the docker-compose file and artifacts, run: npx quorum-dev-quickstart Follow the prompts displayed. When installation is complete, refer to README.md in the installation directory for more information on your test network.","title":"Quorum Developer Quickstart"},{"location":"Tutorials/Quorum-Dev-Quickstart/#quorum-developer-quickstart","text":"","title":"Quorum Developer Quickstart"},{"location":"Tutorials/Quorum-Dev-Quickstart/#prerequisites","text":"Docker and Docker-compose Nodejs On Windows: Windows Subsystem for Linux 2 Docker desktop configured to use the WSL2-based engine. Important Ensure you allow Docker up to 4G of memory or 6G if running the privacy examples. Refer to the Resources section in Docker for Mac and Docker Desktop for details.","title":"Prerequisites"},{"location":"Tutorials/Quorum-Dev-Quickstart/#usage","text":"To create the docker-compose file and artifacts, run: npx quorum-dev-quickstart Follow the prompts displayed. When installation is complete, refer to README.md in the installation directory for more information on your test network.","title":"Usage"},{"location":"Tutorials/Start-EthSigner/","text":"Start EthSigner with a single signer \u00b6 For file-based signing, EthSigner requires a V3 keystore key file and a password file. Tip EthSigner also supports signing transactions with a key stored in an external vault (for example, HashiCorp Vault ), or using multiple V3 keystore key files . Prerequisites \u00b6 EthSigner Hyperledger Besu Node.js web3.js Note The Ethereum client used in this documentation is Hyperledger Besu but EthSigner can be used with any Ethereum client. Start Besu \u00b6 Start Besu , setting the: --rpc-http-port option to 8590 --data-path option to an appropriate directory. Example besu --network = dev --miner-enabled --miner-coinbase = 0xfe3b557e8fb62b89f4916b721be55ceb828dbd73 --rpc-http-cors-origins = \"all\" --host-allowlist = \"*\" --rpc-http-enabled --rpc-http-port = 8590 --data-path = /Users/<user.name>/Datadir Important EthSigner requires a chain ID to be used when signing transactions. The downstream Ethereum client must be operating in a milestone supporting replay protection. That is, the genesis file must include at least the Spurious Dragon milestone (defined as eip158Block in the genesis file) so the blockchain is using a chain ID. Create password and key files \u00b6 Create a text file containing the password for the V3 keystore key file to be created (for example, passwordFile ). Use the web3.js library to create a key file where: <AccountPrivateKey> is the private key of the account with which EthSigner will sign transactions. <Password> is the password for the key file being created. The password must match the password saved in the password file created previously ( passwordFile in this example). Example Create key file 1 2 3 4 5 6 7 8 const Web3 = require ( 'web3' ) // Web3 initialization (should point to the JSON-RPC endpoint) const web3 = new Web3 ( new Web3 . providers . HttpProvider ( 'http://127.0.0.1:8590' )) var V3KeyStore = web3 . eth . accounts . encrypt ( \"<AccountPrivateKey>\" , \"<Password>\" ); console . log ( JSON . stringify ( V3KeyStore )); process . exit (); Example 1 2 3 4 5 6 7 8 const Web3 = require ( 'web3' ) // Web3 initialization (should point to the JSON-RPC endpoint) const web3 = new Web3 ( new Web3 . providers . HttpProvider ( 'http://127.0.0.1:8590' )) var V3KeyStore = web3 . eth . accounts . encrypt ( \"0x8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\" , \"password\" ); console . log ( JSON . stringify ( V3KeyStore )); process . exit (); Copy and paste the example JS script to a file (for example, createKeyFile.js ) and replace the placeholders. Use the JS script to display the text for the key file: node createKeyFile.js Copy and paste the text to a file (for example, keyFile ). The file is your V3 keystore key file. Start EthSigner \u00b6 Start EthSigner with options specified as follows: chain-id is the chain ID specified in the Besu genesis file. downstream-http-port is the rpc-http-port specified for Besu ( 8590 in this example). key-file and password-file are the key and password files created above . Example ethsigner --chain-id=2018 --downstream-http-port=8590 file-based-signer --key-file=/mydirectory/keyFile --password-file=/mydirectory/passwordFile If using a cloud-based Ethereum client such as Infura , specify the endpoint using the --downstream-http-host and --downstream-http-path command line options. Example ethsigner --chain-id=5 --downstream-http-host=goerli.infura.io \\ --downstream-http-path=/v3/d0e63ca5bb1e4eef2284422efbc51a56 --downstream-http-port=443 \\ --downstream-http-tls-enabled file-based-signer --key-file=/mydirectory/keyFile \\ --password-file=/mydirectory/passwordFile Confirm EthSigner is up \u00b6 Use the upcheck endpoint to confirm EthSigner is running. Example curl HTTP request curl -X GET http://127.0.0.1:8545/upcheck Result I'm up Confirm EthSigner passing requests to Besu \u00b6 Request the current block number using [ eth_blockNumber ] with the EthSigner JSON-RPC endpoint ( 8545 in this example): curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":51}' http://127.0.0.1:8545 You can now use EthSigner to sign transactions with the key stored in the V3 keystore key file.","title":"Start EthSigner with a single signer"},{"location":"Tutorials/Start-EthSigner/#start-ethsigner-with-a-single-signer","text":"For file-based signing, EthSigner requires a V3 keystore key file and a password file. Tip EthSigner also supports signing transactions with a key stored in an external vault (for example, HashiCorp Vault ), or using multiple V3 keystore key files .","title":"Start EthSigner with a single signer"},{"location":"Tutorials/Start-EthSigner/#prerequisites","text":"EthSigner Hyperledger Besu Node.js web3.js Note The Ethereum client used in this documentation is Hyperledger Besu but EthSigner can be used with any Ethereum client.","title":"Prerequisites"},{"location":"Tutorials/Start-EthSigner/#start-besu","text":"Start Besu , setting the: --rpc-http-port option to 8590 --data-path option to an appropriate directory. Example besu --network = dev --miner-enabled --miner-coinbase = 0xfe3b557e8fb62b89f4916b721be55ceb828dbd73 --rpc-http-cors-origins = \"all\" --host-allowlist = \"*\" --rpc-http-enabled --rpc-http-port = 8590 --data-path = /Users/<user.name>/Datadir Important EthSigner requires a chain ID to be used when signing transactions. The downstream Ethereum client must be operating in a milestone supporting replay protection. That is, the genesis file must include at least the Spurious Dragon milestone (defined as eip158Block in the genesis file) so the blockchain is using a chain ID.","title":"Start Besu"},{"location":"Tutorials/Start-EthSigner/#create-password-and-key-files","text":"Create a text file containing the password for the V3 keystore key file to be created (for example, passwordFile ). Use the web3.js library to create a key file where: <AccountPrivateKey> is the private key of the account with which EthSigner will sign transactions. <Password> is the password for the key file being created. The password must match the password saved in the password file created previously ( passwordFile in this example). Example Create key file 1 2 3 4 5 6 7 8 const Web3 = require ( 'web3' ) // Web3 initialization (should point to the JSON-RPC endpoint) const web3 = new Web3 ( new Web3 . providers . HttpProvider ( 'http://127.0.0.1:8590' )) var V3KeyStore = web3 . eth . accounts . encrypt ( \"<AccountPrivateKey>\" , \"<Password>\" ); console . log ( JSON . stringify ( V3KeyStore )); process . exit (); Example 1 2 3 4 5 6 7 8 const Web3 = require ( 'web3' ) // Web3 initialization (should point to the JSON-RPC endpoint) const web3 = new Web3 ( new Web3 . providers . HttpProvider ( 'http://127.0.0.1:8590' )) var V3KeyStore = web3 . eth . accounts . encrypt ( \"0x8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\" , \"password\" ); console . log ( JSON . stringify ( V3KeyStore )); process . exit (); Copy and paste the example JS script to a file (for example, createKeyFile.js ) and replace the placeholders. Use the JS script to display the text for the key file: node createKeyFile.js Copy and paste the text to a file (for example, keyFile ). The file is your V3 keystore key file.","title":"Create password and key files"},{"location":"Tutorials/Start-EthSigner/#start-ethsigner","text":"Start EthSigner with options specified as follows: chain-id is the chain ID specified in the Besu genesis file. downstream-http-port is the rpc-http-port specified for Besu ( 8590 in this example). key-file and password-file are the key and password files created above . Example ethsigner --chain-id=2018 --downstream-http-port=8590 file-based-signer --key-file=/mydirectory/keyFile --password-file=/mydirectory/passwordFile If using a cloud-based Ethereum client such as Infura , specify the endpoint using the --downstream-http-host and --downstream-http-path command line options. Example ethsigner --chain-id=5 --downstream-http-host=goerli.infura.io \\ --downstream-http-path=/v3/d0e63ca5bb1e4eef2284422efbc51a56 --downstream-http-port=443 \\ --downstream-http-tls-enabled file-based-signer --key-file=/mydirectory/keyFile \\ --password-file=/mydirectory/passwordFile","title":"Start EthSigner"},{"location":"Tutorials/Start-EthSigner/#confirm-ethsigner-is-up","text":"Use the upcheck endpoint to confirm EthSigner is running. Example curl HTTP request curl -X GET http://127.0.0.1:8545/upcheck Result I'm up","title":"Confirm EthSigner is up"},{"location":"Tutorials/Start-EthSigner/#confirm-ethsigner-passing-requests-to-besu","text":"Request the current block number using [ eth_blockNumber ] with the EthSigner JSON-RPC endpoint ( 8545 in this example): curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":51}' http://127.0.0.1:8545 You can now use EthSigner to sign transactions with the key stored in the V3 keystore key file.","title":"Confirm EthSigner passing requests to Besu"}]}